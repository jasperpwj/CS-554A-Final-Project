[{"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js":"1","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js":"2","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/serviceWorker.js":"3","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js":"4","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js":"5","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js":"6","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js":"7","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js":"8","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js":"9","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js":"10","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js":"11","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js":"12","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js":"13","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js":"14","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js":"15"},{"size":764,"mtime":1607531061497,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1607330962464,"results":"18","hashOfConfig":"17"},{"size":5086,"mtime":1607332093071,"results":"19","hashOfConfig":"17"},{"size":1103,"mtime":1607499059192,"results":"20","hashOfConfig":"17"},{"size":5790,"mtime":1607331296207,"results":"21","hashOfConfig":"17"},{"size":9196,"mtime":1607331296206,"results":"22","hashOfConfig":"17"},{"size":8851,"mtime":1607588497892,"results":"23","hashOfConfig":"17"},{"size":5907,"mtime":1607331296210,"results":"24","hashOfConfig":"17"},{"size":5303,"mtime":1607592849830,"results":"25","hashOfConfig":"17"},{"size":7031,"mtime":1607483748061,"results":"26","hashOfConfig":"17"},{"size":7194,"mtime":1607594282549,"results":"27","hashOfConfig":"17"},{"size":682,"mtime":1607587271430,"results":"28","hashOfConfig":"17"},{"size":237,"mtime":1607530951466,"results":"29","hashOfConfig":"17"},{"size":171,"mtime":1607508456675,"results":"30","hashOfConfig":"17"},{"size":1918,"mtime":1607586936582,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1gr11ca",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js",["68"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//serviceWorker.unregister();\nreportWebVitals();",["69","70"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/serviceWorker.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js",["71"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar,Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n        marginBottom:'30px',\n    },\n\tcard: {\n\t\tmaxWidth: 200,\n\t\theight: 'auto',\n\t\tmarginLeft: '30px',\n\t\tmarginRight: '30px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst GenresList = (props) =>{\n    const classes = useStyles();\n    const [ genresList, setGenresList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [total, setTotal] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n    let card = null;\n\n    async function getData(url){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    }else{\n                    setTotal(Math.ceil(body.categories.total / 24));\n                    setGenresList(body.categories.items);\n                    setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories?limit=24&&offset=${page*24-24}`);\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n\n        const buildCard = (genre)  => {\n            return(\n                <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={genre.id}>\n                    <Card className={classes.card} variant='outlined'>\n                    <CardActionArea>\n                        <Link to={`/${genre.id}/playList`}>\n                        <div className='category-image'>\n                            <img alt=\"category\" src={genre.icons ? genre.icons[0].url : genre.images[0].url} width='100%'/>\n\n                             <p className='category-name'>{genre.name}</p>\n\n                        </div>\n                        </Link>\n                    </CardActionArea>\n                    </Card>\n                </Grid>\n            );\n        };\n        card = genresList && genresList.map((genre) => {\n            return buildCard(genre);\n        });\n        if(loading){\n            return (\n                <div>\n                    <h2>Loading....</h2>\n                </div>\n            );\n        }else if(error){\n            return (\n                <div>\n                    <h2>Error....</h2>\n                </div>\n            );\n        }else {\n            return (\n                <div>\n                    <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All Categories\" />\n                    </AppBar>\n                    <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                    </Grid>\n                    {total === 1?<div className={classes.pages}>No More</div>:\n                    <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                    </div>}\n\n                </div>\n            );\n        }\n\n};\n\nexport default withRouter(GenresList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js",["72"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles,  Box, Tabs, Tab, AppBar } from '@material-ui/core';\nimport '../App.css';\nimport Song from './Song';\nimport Information from './Infotmation';\nconst useStyles = makeStyles({\n    card: {\n\t\tmaxWidth: 300,\n\t\theight: 'auto',\n\t\tmarginLeft: '20px',\n\t\tmarginRight: '20px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length_header: {\n        width: '60px'\n    },\n    song_added_header: {\n        width: '150px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px'\n    },\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n    },\n});\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={2}>\n            <div>{children}</div>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nconst AlbumList = (props) => {\n    const [value, setValue] = React.useState(0);\n    //const regex = /(<([^>]+)>)/gi;\n    const classes = useStyles();\n    const [ albumList, setAlbumList ]  = useState(undefined);\n    const [page, setPage] = useState(1);\n\tconst [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [ top, setTop] = useState(undefined);\n\tconst [singerName, setSingerName] = useState('');\n    const [singerPhoto, setSingerPhoto] = useState('');\n    const [singerPop, setSingerPop] = useState(0);\n    const [singerF, setSingerF] = useState(0);\n    const [genre, setGenre] = useState(undefined);\n    const [total, setTotal] = useState(undefined);\n    const [id, setId] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n\tlet card = null;\n\n\tasync function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    } else {\n                        if(type === 'artist'){\n                            setSingerName(body.name);\n                            setId(body.id);\n                            setSingerPhoto(body.images[1].url);\n                            setGenre(body.genres);\n                            setSingerPop(body.popularity);\n                            setSingerF(body.followers.total);\n                        }\n                        if(type === 'album'){\n                            setAlbumList(body.items);\n                            setTotal(Math.ceil(body.total / 24));\n                        }\n                        if(type === 'topSong'){\n                            setTop(body.tracks);\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(() => {\n        async function fetchData(){\n            try{\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}/albums?limit=24&&offset=${page*24-24}`,'album');\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}`, 'artist');\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}/top-tracks?country=SE`,'topSong');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page,props.match.params.id]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n      };\n    const buildList = (albm) => {\n\t\treturn (\n\t\t<Grid item xs={6} sm={4} md={3} lg={2} xl={2}  key={albm.id}>\n\t\t\t<Card className={classes.card} variant='outlined'>\n\t\t\t<CardActionArea>\n\t\t\t\t<Link to={`/albums/songsList/${albm.id}`}>\n\t\t\t\t<div className='category-image'>\n\t\t\t\t\t<img alt=\"category\" src={albm.icons ? albm.icons[0].url : albm.images[1].url} width='100%'/>\n\n\t\t\t\t\t <p className='category-name'>{albm.name}</p>\n\n\t\t\t\t</div>\n\t\t\t\t</Link>\n\t\t\t</CardActionArea>\n\t\t\t</Card>\n\t\t</Grid>\n\t\t);\n    };\n\n\tcard = albumList && albumList.map((album) => {\n        return buildList(album);\n    });\n    let topList = top && top.map((song) => {\n        return (\n            <Song song={song} key={song.id}></Song>\n        )\n    });\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n\t\treturn (\n          <div>\n            <Information name={singerName} image={singerPhoto} genre={genre} id={id} follower={singerF} popularity={singerPop}></Information>\n            <AppBar position=\"static\" className={classes.appbar}>\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" centered variant=\"fullWidth\">\n                    <Tab  label=\"All Albums\" {...a11yProps(0)} />\n                    <Tab  label=\"Top Songs\" {...a11yProps(1)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n            <div>\n\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>}\n            </div>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n            <div className={classes.song_header_container}>\n                <div className={classes.song_title_header}>\n                    <p>Title</p>\n                </div>\n                <div className={classes.song_artist_header}>\n                    <p>Artist</p>\n                </div>\n                <div className={classes.song_album_header}>\n                    <p>Album</p>\n                </div>\n                <div className={classes.song_added_header}>\n                    <p>Date</p>\n                </div>\n                <div className={classes.song_length_header}>\n                <p>Duration</p>\n                </div>\n\n            </div>\n            {topList}\n            </TabPanel>\n          </div>\n        );\n    }\n}\n\n\n\n\nexport default withRouter(AlbumList);\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js",["73","74","75"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js",["76"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar, Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n        appbar: {\n            background:'#006600',\n            marginLeft:'30px',\n            marginRight:'30px',\n            width: 'auto',\n            marginBottom:'30px',\n        },\n        card: {\n            maxWidth: 300,\n            height: 'auto',\n            marginLeft: '30px',\n            marginRight: '30px',\n            borderRadius: 5,\n            border: '1px solid #1e8678',\n            boxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n        },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst PlayList=(props)=>{\n    const classes = useStyles();\n    const [ playList, setPlayList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [ total, setTotal] =  useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error ||  response.statusCode  ===  404){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'playlists'){\n                            setPlayList(body.playlists.items);\n                            setTotal(Math.ceil(body.playlists.total / 24))\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories/${props.match.params.categories}/playlists?limit=24&&offset=${page*24-24}`,'playlists');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n    const buildCard = (playlist)  => {\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={playlist.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={`/playlists/songsList/${playlist.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={playlist.icons ? playlist.icons[0].url : playlist.images[0].url} width='100%'/>\n\n                         <p className='category-name'>{playlist.name}</p>\n\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    let card = playList && playList.map((playlist) => {\n        return buildCard(playlist);\n    });\n\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n            <div>\n                <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All PlayLists\" />\n                    </AppBar>\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>\n                }\n            </div>\n\n        );\n    }\n}\nexport default withRouter(PlayList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js",["77","78"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js",["79","80","81","82","83","84","85"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport download from '../img/download.jpeg'\n\nimport {Chip, Avatar, Link} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: '#ccffcc',\n    display: 'flex',\n    height: 400,\n    margin: '30px',\n  },\n  details: {\n    marginTop:'20px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '0.7 0 auto',\n    padding:0\n  },\n  cover: {\n    margin:'20px',\n    width: 400,\n\n  },\n  name: {\n    textAlign: 'left',\n\n    letterSpacing: '1px',\n    marginLeft: '200px',\n    fontWeight: 500,\n    fontSize: '40px'\n  },\n  tag:{\n    display: 'flex',\n    textAlign: 'left',\n    fontWeight: 500,\n    lineHeight: 4,\n    marginLeft: '200px'\n  },\n  chip:{\n    marginLeft:'7px',\n    background: '#666600'\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n  detail: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  related:{\n    textAlign: 'left',\n      display:'flex',\n      marginLeft:'200px',\n      fontWeight: 500,\n      lineHeight:2.75,\n  },\n  related_icon:{\n    textAlign: 'left',\n      display:'flex',\n  },\n  icon:{\n      marginLeft:'5px'\n  },\n  span_label:{\n      marginRight:'20px'\n  }\n}));\n\nexport default function Information(props) {\n  const classes = useStyles();\n  const {name, image, genre,id,popularity,follower,description, owner, related_album, date, artists} = props;\n  const [related, setRelated] = useState(undefined);\n\n\n  async function getData(url, type){\n    var request = require('request');\n    var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n    var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n    var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n    };\n    request.post(authOptions,function(error, response,body){\n        if (!error && response.statusCode === 200) {\n                var token = body.access_token;\n                var options = {\n                    url: url,\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    },\n                    json: true\n                };\n                request.get(options, function(error, response, body) {\n                    setRelated(body.artists);\n                });\n        }\n    });\n}\n\nconst handleJump=(id)=>{\n    if(id){\n        window.location.href=`/albumList/${id}`;\n    }\n}\n\nuseEffect(() => {\n    async function fetchData(){\n        try{\n            if(id){\n            await getData(`https://api.spotify.com/v1/artists/${id}/related-artists`,'related');\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    fetchData();\n},[props.id])\n\n  let genres = genre && genre.map((genre, index)=>{\n    return (\n        <Chip color=\"primary\" size=\"small\" label={genre} className={classes.chip} key={index}/>\n    )\n  });\n    let imageIcon = related && related.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon} key={index}>\n                    <Avatar alt=\"Remy Sharp\" src={e.images[1].url} className={classes.large}  onClick={()=>handleJump(e.id)}/>\n                </div>\n                )\n        }\n    });\n    let imageAlbum = related_album && related_album.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon} key={index}>\n                    <Avatar alt=\"Remy Sharp\" src={e.url} className={classes.large} />\n                </div>\n                )\n        }\n    });\n    let imageArtist = artists && artists.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon}key={index}>\n                    <Avatar alt=\"Remy Sharp\"  className={classes.large}  onClick={()=>handleJump(e.id)}>{e.name}</Avatar>\n                </div>\n                )\n        }\n    });\n\n  return (\n    <Card className={classes.root}>\n        <CardMedia\n        className={classes.cover}\n        image={image?image:download}\n        title=\"photo\"\n        />\n        <div className={classes.details}>\n            <CardContent className={classes.content}>\n                <div component=\"h5\" variant=\"h5\" className={classes.name}>\n                    {name}\n                </div>\n                <div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>{genre?'Styles:':'Description:'}</span>\n                    {genre?<div>\n                        {genres}\n                        </div>:<div>\n                        {description}\n\n                    </div>\n                    }\n\n                </div>\n                {popularity?<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Popularity:</span>\n                    <div >\n                    {popularity}\n                    </div>\n                </div>:owner=='author'?<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Release Date:</span>\n                    <div >\n                    {date}\n                    </div>\n                </div>:<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Owner:</span>\n                    <div >\n                    {owner}\n                    </div>\n                </div>\n                }\n                <div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Followers:</span>\n                    <div >\n                    {follower}\n                    </div>\n                </div>\n\n            </CardContent>\n            {id?<div className={classes.related}>\n                <span className={classes.span_label}>Related Artists:</span>\n                <div className={classes.related_icon}>\n                   {imageIcon}\n                </div>\n            </div>: !artists?<div className={classes.related}>\n                <span className={classes.span_label}>Related Albums:</span>\n                <div className={classes.related_icon}>\n                   {imageAlbum}\n                </div>\n            </div>:<div className={classes.related}>\n                <span className={classes.span_label}>Related Artists:</span>\n                <div className={classes.related_icon}>\n                   {imageArtist}\n                </div>\n            </div>}\n        </div>\n    </Card>\n  );\n}\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js",["86","87","88","89","90","91","92","93","94"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js",["95"],{"ruleId":"96","severity":1,"message":"97","line":6,"column":13,"nodeType":"98","messageId":"99","endLine":6,"endColumn":26},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":125,"column":8,"nodeType":"106","endLine":125,"endColumn":14,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"105","line":199,"column":8,"nodeType":"106","endLine":199,"endColumn":36,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":7,"column":10,"nodeType":"98","messageId":"99","endLine":7,"endColumn":21},{"ruleId":"104","severity":1,"message":"110","line":202,"column":7,"nodeType":"106","endLine":202,"endColumn":54,"suggestions":"111"},{"ruleId":"104","severity":1,"message":"110","line":228,"column":8,"nodeType":"106","endLine":228,"endColumn":67,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"113","line":126,"column":8,"nodeType":"106","endLine":126,"endColumn":14,"suggestions":"114"},{"ruleId":"96","severity":1,"message":"115","line":99,"column":13,"nodeType":"98","messageId":"99","endLine":99,"endColumn":18},{"ruleId":"104","severity":1,"message":"116","line":122,"column":7,"nodeType":"106","endLine":122,"endColumn":35,"suggestions":"117"},{"ruleId":"96","severity":1,"message":"118","line":2,"column":22,"nodeType":"98","messageId":"99","endLine":2,"endColumn":30},{"ruleId":"96","severity":1,"message":"119","line":8,"column":23,"nodeType":"98","messageId":"99","endLine":8,"endColumn":27},{"ruleId":"104","severity":1,"message":"120","line":131,"column":3,"nodeType":"106","endLine":131,"endColumn":13,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":138,"column":54,"nodeType":"124","messageId":"125","endLine":138,"endColumn":56},{"ruleId":"122","severity":1,"message":"123","line":147,"column":67,"nodeType":"124","messageId":"125","endLine":147,"endColumn":69},{"ruleId":"122","severity":1,"message":"123","line":156,"column":56,"nodeType":"124","messageId":"125","endLine":156,"endColumn":58},{"ruleId":"126","severity":1,"message":"127","line":194,"column":29,"nodeType":"128","messageId":"129","endLine":194,"endColumn":31},{"ruleId":"96","severity":1,"message":"130","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":28},{"ruleId":"96","severity":1,"message":"131","line":85,"column":11,"nodeType":"98","messageId":"99","endLine":85,"endColumn":16},{"ruleId":"96","severity":1,"message":"132","line":86,"column":13,"nodeType":"98","messageId":"99","endLine":86,"endColumn":24},{"ruleId":"96","severity":1,"message":"133","line":86,"column":26,"nodeType":"98","messageId":"99","endLine":86,"endColumn":40},{"ruleId":"96","severity":1,"message":"134","line":87,"column":13,"nodeType":"98","messageId":"99","endLine":87,"endColumn":27},{"ruleId":"96","severity":1,"message":"135","line":87,"column":29,"nodeType":"98","messageId":"99","endLine":87,"endColumn":46},{"ruleId":"96","severity":1,"message":"136","line":191,"column":17,"nodeType":"98","messageId":"99","endLine":191,"endColumn":21},{"ruleId":"104","severity":1,"message":"137","line":202,"column":8,"nodeType":"106","endLine":202,"endColumn":36,"suggestions":"138"},{"ruleId":"104","severity":1,"message":"139","line":209,"column":8,"nodeType":"106","endLine":209,"endColumn":36,"suggestions":"140"},{"ruleId":"96","severity":1,"message":"141","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":14},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'total'. Either include it or remove the dependency array.","ArrayExpression",["144"],["145"],"'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["146"],["147"],"React Hook useEffect has missing dependencies: 'props.match.params.categories' and 'total'. Either include them or remove the dependency array.",["148"],"'pause' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'song.track.id'. Either include it or remove the dependency array.",["149"],"'useTheme' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["150"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'deprecationHandler' is defined but never used.","'index' is assigned a value but never used.","'currentPlay' is assigned a value but never used.","'setCurrentPlay' is assigned a value but never used.","'changeProgress' is assigned a value but never used.","'setChangeProgress' is assigned a value but never used.","'time' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'audioControl' and 'pauseSong'. Either include them or remove the dependency array.",["152"],"'json' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [page, total]",{"range":"171","text":"172"},"Update the dependencies array to be: [page, props.match.params.id, total]",{"range":"173","text":"174"},"Update the dependencies array to be: [getData, props.match.params.id, props.match.params.type]",{"range":"175","text":"176"},"Update the dependencies array to be: [page, props.match.params.id, total, props.match.params.type, getData]",{"range":"177","text":"178"},"Update the dependencies array to be: [page, props.match.params.categories, total]",{"range":"179","text":"180"},"Update the dependencies array to be: [song.track.id, songR, songsPlay.globalPlay]",{"range":"181","text":"182"},"Update the dependencies array to be: [id, props.id]",{"range":"183","text":"184"},"Update the dependencies array to be: [dispatch, song, songsPlay.globalPlay]",{"range":"185","text":"186"},"Update the dependencies array to be: [songsPlay.globalPlay, song, audioControl, pauseSong]",{"range":"187","text":"188"},[3543,3549],"[page, total]",[5937,5965],"[page, props.match.params.id, total]",[5908,5955],"[getData, props.match.params.id, props.match.params.type]",[6597,6656],"[page, props.match.params.id, total, props.match.params.type, getData]",[3856,3862],"[page, props.match.params.categories, total]",[3051,3079],"[song.track.id, songR, songsPlay.globalPlay]",[3147,3157],"[id, props.id]",[5565,5593],"[dispatch, song, songsPlay.globalPlay]",[5741,5769],"[songsPlay.globalPlay, song, audioControl, pauseSong]"]