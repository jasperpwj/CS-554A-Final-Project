[{"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js":"1","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js":"2","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js":"3","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js":"4","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/serviceWorker.js":"5","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/UserProfile.js":"6","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js":"7","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Register/Register.js":"8","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Login/Login.js":"9","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js":"10","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Home.js":"11","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js":"12","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js":"13","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js":"14","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/libs/contextLib.js":"15","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js":"16","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js":"17","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js":"18","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js":"19","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js":"20","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Search.js":"21","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/LikedPage.js":"22","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Nav/TopNav.js":"23","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/addSong.js":"24","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/NewRelease.js":"25","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/My404Component.js":"26","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/removeSong.js":"27","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/UserAccount.js":"28","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/EditProfile.js":"29","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AddImage.js":"30"},{"size":668,"mtime":1607783535424,"results":"31","hashOfConfig":"32"},{"size":4084,"mtime":1608087817619,"results":"33","hashOfConfig":"32"},{"size":237,"mtime":1607666854140,"results":"34","hashOfConfig":"32"},{"size":362,"mtime":1607665978552,"results":"35","hashOfConfig":"32"},{"size":5086,"mtime":1607783535425,"results":"36","hashOfConfig":"32"},{"size":2408,"mtime":1607783535423,"results":"37","hashOfConfig":"32"},{"size":6005,"mtime":1608002875026,"results":"38","hashOfConfig":"32"},{"size":8166,"mtime":1608087817623,"results":"39","hashOfConfig":"32"},{"size":4579,"mtime":1608087817621,"results":"40","hashOfConfig":"32"},{"size":9153,"mtime":1608092809537,"results":"41","hashOfConfig":"32"},{"size":3277,"mtime":1608087817620,"results":"42","hashOfConfig":"32"},{"size":5848,"mtime":1608002753928,"results":"43","hashOfConfig":"32"},{"size":9736,"mtime":1608002607192,"results":"44","hashOfConfig":"32"},{"size":9024,"mtime":1608092805872,"results":"45","hashOfConfig":"32"},{"size":168,"mtime":1607783535424,"results":"46","hashOfConfig":"32"},{"size":171,"mtime":1607666835606,"results":"47","hashOfConfig":"32"},{"size":7016,"mtime":1608092808156,"results":"48","hashOfConfig":"32"},{"size":7951,"mtime":1608092845190,"results":"49","hashOfConfig":"32"},{"size":2088,"mtime":1608092804277,"results":"50","hashOfConfig":"32"},{"size":802,"mtime":1607801070259,"results":"51","hashOfConfig":"32"},{"size":7576,"mtime":1607996499111,"results":"52","hashOfConfig":"32"},{"size":7250,"mtime":1608009994251,"results":"53","hashOfConfig":"32"},{"size":5966,"mtime":1608087817622,"results":"54","hashOfConfig":"32"},{"size":584,"mtime":1607916665007,"results":"55","hashOfConfig":"32"},{"size":5965,"mtime":1608002492565,"results":"56","hashOfConfig":"32"},{"size":879,"mtime":1608009994253,"results":"57","hashOfConfig":"32"},{"size":440,"mtime":1608009994250,"results":"58","hashOfConfig":"32"},{"size":4114,"mtime":1608087817623,"results":"59","hashOfConfig":"32"},{"size":3962,"mtime":1608087817620,"results":"60","hashOfConfig":"32"},{"size":2102,"mtime":1608087817620,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"1gr11ca",{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"65"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"65"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"65"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"65"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js",["132"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["133","134"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js",["135","136"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/serviceWorker.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/UserProfile.js",["137"],"import '../App.css';\nimport React, {useState, useEffect} from 'react';\n\n\nconst UserProfile = (props) => {\n    const playerUrl = \"https://open.spotify.com\";\n    const [userData, setUserData] = useState(''); \n    var curUrl = window.location;\n    // console.log(\"url: \" + curUrl);\n\n\n    const hash = window.location.hash.substr(1); //url of the current page\n    const arHash = hash.split('='); //this creates an array with key ([0] element) and value ([1] element)\n    const hash_value =  arHash[1];\n\n    const accessToken = hash_value;\n\n\n    useEffect(() => {\n        async function fetchData(){\n            try{\n                const url = \"https://api.spotify.com/v1/me/\";\n\n                const options = {\n                    headers: {\n                        Authorization: \"Bearer \" + accessToken\n                    }\n                };\n                fetch(url, options)\n                .then( res => res.json() )\n                // .then( data => console.log(\"typeof data: \" + typeof data))\n                .then( data => {\n                    console.log(data);\n                    console.log(\"test\");\n                    setUserData(data)\n                } );\n            } catch (e) {\n                console.log(e);\n                // setError(true);\n            }\n        }\n\n        fetchData();\n    }, [accessToken]);\n \n\n    return (\n\t\t<div>\n  \n        <p class = \"login\" style={{fontSize:'30px'}}>\n  \n          Login Successful!\n        </p>\n\n        \n        <p class = \"login\" style={{fontSize:'30px'}}>\n\n                <a\n                    href= {playerUrl}\n                >\n                    Spotify official player\n                </a>\n\t\t</p>\n\n\n        <p style={{fontSize:'50px'}}>\n            The user's profile:\n\t\t</p>\n\n        <p style={{fontSize:'25px'}}>\n            Country: {userData.country} \n\t\t</p>\n\n        <p style={{fontSize:'25px'}}>\n            Name: {userData.display_name}\n\t\t</p>\n\n        <p style={{fontSize:'25px'}}>\n            Email: {userData.email}\n\t\t</p>\n\n        {/* <p style={{fontSize:'25px'}}>\n            External url:  \n                <a\n                    href= {userData.external_urls.spotify}\n                >\n                    Click to open\n                </a>\n\t\t</p> */}\n\n        <p style={{fontSize:'25px'}}>\n            Account type: {userData.product}\n\t\t</p>\n              \n      </div>\n\n        \n    )\n};\n\nexport default UserProfile;\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js",["138"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar, Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n        appbar: {\n            background:'#006600',\n            marginLeft:'30px',\n            marginRight:'30px',\n            width: 'auto',\n            marginBottom:'30px',\n        },\n        card: {\n            maxWidth: 300,\n            height: 'auto',\n            marginLeft: '30px',\n            marginRight: '30px',\n            borderRadius: 5,\n            border: '1px solid #1e8678',\n            boxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n        },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    list_name:{\n        textAlign: 'center'\n    }\n});\n\nconst PlayList=(props)=>{\n    const classes = useStyles();\n    const [ playList, setPlayList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [ total, setTotal] =  useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error ||  response.statusCode  ===  404){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'playlists'){\n                            setPlayList(body.playlists.items);\n                            setTotal(Math.ceil(body.playlists.total / 24))\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories/${props.match.params.categories}/playlists?limit=24&&offset=${page*24-24}`,'playlists');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n    const buildCard = (playlist)  => {\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={playlist.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={`/playlists/songsList/${playlist.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={playlist.icons ? playlist.icons[0].url : playlist.images[0].url} width='100%'/>\n\n                         <p className={classes.list_name}>{playlist.name}</p>\n\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    let card = playList && playList.map((playlist) => {\n        return buildCard(playlist);\n    });\n\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n            <div>\n                <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label={`All PlayLists from ${props.match.params.categories}`} />\n                    </AppBar>\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>\n                }\n            </div>\n\n        );\n    }\n}\nexport default withRouter(PlayList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Register/Register.js",["139","140","141","142","143","144","145"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Login/Login.js",["146","147"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js",["148","149"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Home.js",["150"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js",["151"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar,Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n        marginBottom:'30px',\n    },\n\tcard: {\n\t\tmaxWidth: 200,\n\t\theight: 'auto',\n\t\tmarginLeft: '30px',\n\t\tmarginRight: '30px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    list_name:{\n        textAlign: 'center'\n    }\n});\n\nconst GenresList = (props) =>{\n    const classes = useStyles();\n    const [ genresList, setGenresList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [total, setTotal] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n    let card = null;\n\n    async function getData(url){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    }else{\n                    setTotal(Math.ceil(body.categories.total / 24));\n                    setGenresList(body.categories.items);\n                    setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories?limit=24&&offset=${page*24-24}`);\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n\n        const buildCard = (genre)  => {\n            return(\n                <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={genre.id}>\n                    <Card className={classes.card} variant='outlined'>\n                    <CardActionArea>\n                        <Link to={`/${genre.id}/playList`}>\n                        <div className='category-image'>\n                            <img alt=\"category\" src={genre.icons ? genre.icons[0].url : genre.images[0].url} width='100%'/>\n\n                             <p className={classes.list_name}>{genre.name}</p>\n\n                        </div>\n                        </Link>\n                    </CardActionArea>\n                    </Card>\n                </Grid>\n            );\n        };\n        card = genresList && genresList.map((genre) => {\n            return buildCard(genre);\n        });\n        if(loading){\n            return (\n                <div>\n                    <h2>Loading....</h2>\n                </div>\n            );\n        }else if(error){\n            return (\n                <div>\n                    <h2>Error....</h2>\n                </div>\n            );\n        }else {\n            return (\n                <div>\n                    <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All Categories\" />\n                    </AppBar>\n                    <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                    </Grid>\n                    {total === 1?<div className={classes.pages}>No More</div>:\n                    <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                    </div>}\n\n                </div>\n            );\n        }\n\n};\n\nexport default withRouter(GenresList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js",["152","153"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles,  Box, Tabs, Tab, AppBar } from '@material-ui/core';\nimport '../App.css';\nimport Song from './Song';\nimport Information from './Infotmation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport playAction from '../actions/playAction'\nconst useStyles = makeStyles({\n    card: {\n\t\tmaxWidth: 300,\n\t\theight: 'auto',\n\t\tmarginLeft: '20px',\n\t\tmarginRight: '20px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length_header: {\n        width: '60px'\n    },\n    song_added_header: {\n        width: '150px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px'\n    },\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n    },\n    empty:{\n        width: '250px',\n    },\n    list_name:{\n        textAlign: 'center'\n    }\n});\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={2}>\n            <div>{children}</div>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nconst AlbumList = (props) => {\n    const [value, setValue] = React.useState(0);\n    //const regex = /(<([^>]+)>)/gi;\n    const classes = useStyles();\n    const [ albumList, setAlbumList ]  = useState(undefined);\n    const [page, setPage] = useState(1);\n\tconst [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [ top, setTop] = useState(undefined);\n\tconst [singerName, setSingerName] = useState('');\n    const [singerPhoto, setSingerPhoto] = useState('');\n    const [singerPop, setSingerPop] = useState(0);\n    const [singerF, setSingerF] = useState(0);\n    const [genre, setGenre] = useState(undefined);\n    const [total, setTotal] = useState(undefined);\n    const [id, setId] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n    const dispatch = useDispatch();\n\n\tlet card = null;\n\n\tasync function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    } else {\n                        console.log(type);\n                        if(type === 'artist'){\n                            setSingerName(body.name);\n                            setId(body.id);\n                            setSingerPhoto(body.images[1].url);\n                            setGenre(body.genres);\n                            setSingerPop(body.popularity);\n                            setSingerF(body.followers.total);\n                        }\n                        if(type === 'album'){\n                            setAlbumList(body.items);\n                            setTotal(Math.ceil(body.total / 24));\n                        }\n                        if(type === 'topSong'){\n                            setTop(body.tracks);\n                            dispatch(playAction.updateSongList(body.tracks, 'albums'));\n\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(() => {\n        async function fetchData(){\n            try{\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}/albums?limit=24&&offset=${page*24-24}`,'album');\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}`, 'artist');\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}/top-tracks?country=SE`,'topSong');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page,props.match.params.id]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n      };\n    const buildList = (albm) => {\n\t\treturn (\n\t\t<Grid item xs={6} sm={4} md={3} lg={2} xl={2}  key={albm.id}>\n\t\t\t<Card className={classes.card} variant='outlined'>\n\t\t\t<CardActionArea>\n\t\t\t\t<Link to={`/albums/songsList/${albm.id}`}>\n\t\t\t\t<div className='category-image'>\n\t\t\t\t\t<img alt=\"category\" src={albm.icons ? albm.icons[0].url : albm.images[1].url} width='100%'/>\n\n\t\t\t\t\t <p className={classes.list_name}>{albm.name}</p>\n\n\t\t\t\t</div>\n\t\t\t\t</Link>\n\t\t\t</CardActionArea>\n\t\t\t</Card>\n\t\t</Grid>\n\t\t);\n    };\n\n\tcard = albumList && albumList.map((album) => {\n        return buildList(album);\n    });\n    let topList = top && top.map((song) => {\n        let NewSong = {\n            track: song\n        }\n        return (\n            <Song song={NewSong} key={song.id}></Song>\n        )\n    });\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n\t\treturn (\n          <div>\n            <Information name={singerName} image={singerPhoto} genre={genre} id={id} follower={singerF} popularity={singerPop}></Information>\n            <AppBar position=\"static\" className={classes.appbar}>\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" centered variant=\"fullWidth\">\n                    <Tab  label=\"All Albums\" {...a11yProps(0)} />\n                    <Tab  label=\"Top Songs\" {...a11yProps(1)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n            <div>\n\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>}\n            </div>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n            <div className={classes.song_header_container}>\n                <div className={classes.empty}></div>\n                <div className={classes.song_title_header}>\n                    <p>Title</p>\n                </div>\n                <div className={classes.song_artist_header}>\n                    <p>Artist</p>\n                </div>\n                <div className={classes.song_album_header}>\n                    <p>Album</p>\n                </div>\n                <div className={classes.song_added_header}>\n                    <p>Date</p>\n                </div>\n                <div className={classes.song_length_header}>\n                <p>Duration</p>\n                </div>\n\n            </div>\n            {topList}\n            </TabPanel>\n            <div className={classes.pages}>No More</div>\n          </div>\n        );\n    }\n}\n\n\n\n\nexport default withRouter(AlbumList);\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js",["154","155","156"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/libs/contextLib.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js",["157","158","159","160"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js",["161"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Search.js",["162","163","164","165","166","167","168","169","170","171","172"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar,Tab } from '@material-ui/core';\nimport Image from 'react-bootstrap/Image'\nimport noImage from '../img/download.jpeg';\nimport '../App.css';\nconst useStyles = makeStyles({\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n        marginBottom:'30px',\n    },\n\tcard: {\n\t\tmaxWidth: 200,\n\t\theight: 'auto',\n\t\tmarginLeft: '30px',\n\t\tmarginRight: '30px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst Search = (props) =>{\n    const classes = useStyles();\n    const [ albumList, setAlbumList ] = useState(undefined);\n    const [ artistsList, setArtistsList ] = useState(undefined);\n    const [ playList, setPlayList ] = useState(undefined);\n    const [ page, setPage ] = useState(1);\n    const [ isLast, setLast ] = useState(false);\n    const [ isFirst, setFirst ] = useState(true);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ]  =  useState(false);\n    const [ searchTerm, setSearchTerm ] = useState('');\n    let card = null;\n    let card2 = null;\n    let card3 = null;\n    async function getData(url){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    }else{\n                    setAlbumList(body.albums.items);\n                    setArtistsList(body.artists.items);\n                    setPlayList(body.playlists.items);\n                    setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    const handleChange = (e) => {\n        setSearchTerm(e.target.value);\n        // setLoading(true);\n        console.log(e.target.value);\n        if(e.target.value){\n            getData(`https://api.spotify.com/v1/search?query=${e.target.value}&offset=0&limit=6&type=album%2Cartist%2Cplaylist`);\n        }\n    };\n    const searchValue = async (value) => {\n\t\tsetSearchTerm(value);\n\t};\n    const buildCard = (genre)  => {\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={genre.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={genre.type==='artist'?`/albumList/${genre.id}`:genre.type==='album'?`/albums/songsList/${genre.id}`:`/playlists/songsList/${genre.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={genre.images && genre.images.length === 0 ? noImage : genre.images[0].url} width='100%'/>\n                         <p className='category-name'>{genre.name}</p>\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    card = artistsList && artistsList.map((artist) => {\n        return buildCard(artist);\n    });\n    card2 = albumList && albumList.map((artist) => {\n        return buildCard(artist);\n    });\n    card3 = playList && playList.map((artist) => {\n        return buildCard(artist);\n    });\n\n    if(loading){\n        return (\n            <div>\n                <h2>Loading....</h2>\n            </div>\n        );\n    }else if(error){\n        return (\n            <div>\n                <h2>Error....</h2>\n            </div>\n        );\n    }else {\n            return (\n                <div>\n                    <div className=\"form__group field\">\n                    <form\n                        className = \"searchform\"\n                        method='POST '\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                        }}\n                        name='formName'\n                    >\n                        <input className=\"form__field\" autoComplete='off' type='text' name='searchTerm' placeholder=\"Search\" onChange={handleChange} />\n                        <label for=\"name\" class=\"form__label\">Search</label>\n                    </form>\n                    </div>\n                     {(searchTerm) ? (<div>\n                        <AppBar position=\"static\" className={classes.appbar}>\n                        <Tab  label=\"Artists\" />\n                        </AppBar>\n                        <Grid container className={classes.grid} spacing={2}>\n                            {card}\n                        </Grid>\n                        <AppBar position=\"static\" className={classes.appbar}>\n                        <Tab  label=\"Albums\" />\n                        </AppBar>\n                        <Grid container className={classes.grid} spacing={2}>\n                            {card2}\n                        </Grid>\n                        <AppBar position=\"static\" className={classes.appbar}>\n                        <Tab  label=\"PlayList\" />\n                        </AppBar>\n                        <Grid container className={classes.grid} spacing={2}>\n                            {card3}\n                        </Grid>\n                    </div>):(\n                    <div>\n                        <h1 className =\"searchh1\">Search Artists, Albums or PlayList</h1>\n                    </div>\n                     )}\n                    {/* {total === 1?<div className={classes.pages}>No More</div>:\n                    <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                    </div>} */}\n                </div>\n            );\n    }\n\n\t// return (\n\t// \t<form\n\t// \t\tmethod='POST '\n\t// \t\tonSubmit={(e) => {\n\t// \t\t\te.preventDefault();\n\t// \t\t}}\n\t// \t\tname='formName'\n\t// \t\tclassName='center'\n\t// \t>\n\t// \t\t<label>\n\t// \t\t<input autoComplete='off' type='text' name='searchTerm' placeholder=\"Search\" onChange={handleChange} />\n\t// \t\t</label>\n\t// \t</form>\n\t// );\n\n};\n\nexport default Search;","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/LikedPage.js",["173","174","175","176"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport Pagination from '@material-ui/lab/Pagination'\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport {Link} from '@material-ui/core'\nimport playAction from '../actions/playAction'\nimport removeSong from \"../actions/removeSong\";\nimport {useDispatch} from 'react-redux';\nconst axios = require('axios').default;\n\nconst columns = [\n    { id: 'title', label: 'Title', align: 'center', minWidth: 100 },\n    { id: 'artist', label: 'Artist', align: 'center', minWidth: 100 },\n    {\n        id: 'albumName',\n        label: 'Album Name',\n        minWidth: 100,\n        align: 'center',\n    },\n    {\n        id: 'remove',\n        label: 'Remove',\n        minWidth: 100,\n        align: 'center',\n    }\n\n];\n\n\n// if(Nsong.track.preview_url){\n//     dispatch(playAction.playSong(song));\n// }else{\n//     dispatch(playAction.toSong(song))\n// }\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 700,\n    },\n});\nconst LikedPage = () => {\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [favoriteSongList, SetFavoriteSongList] = useState(undefined);\n    const [dataSize, SetDatSie] = useState(0);\n    const [loading, SetLoading] = useState(true);\n    const [error, SetError] = useState(false);\n\n    const dispatch = useDispatch();\n\n    async function getFavoriteSongs() {\n        try {\n            const userInfo = {\n                userEmail: window.sessionStorage.userEmail\n            };\n            const favoriteSongs = await axios.post('http://localhost:5000/users/favoriteSongs', userInfo);\n            let newFavoriteSongs = [];\n            if(favoriteSongs.data) {\n                favoriteSongs.data.map(song => {\n                    let newSongFormat = {\n                        storedId: song.id,\n                        track: {\n                            album:{\n                                id: song.albumId,\n                                name: song.albumName,\n                            },\n                            artists: [\n                                {\n                                    id: song.artistId,\n                                    name: song.artist\n                                }\n                                ],\n                            name: song.title,\n                            preview_url: song.playUrl,\n                            id: song.songId\n                        },\n                    };\n                    newFavoriteSongs.push(newSongFormat)\n                })\n            }\n            await SetFavoriteSongList(newFavoriteSongs);\n            await SetDatSie(newFavoriteSongs.length);\n            await SetLoading(false)\n        } catch(e) {\n            SetError(true);\n            console.log({error: e})\n        }\n    }\n    useEffect(()=> {\n        getFavoriteSongs();\n    }, [dataSize, page]);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleRemoveSong = (songId) => {\n        try {\n            const result =  removeSong(songId);\n            SetDatSie(dataSize - 1);\n            if(result) {\n                alert(\"Remove the song successfully\")\n            }\n        } catch(e) {\n            console.log({error:e})\n        }\n    };\n\n    if(loading) {\n        return (\n            <div>Loading....</div>\n        )\n    } else if(error) {\n        return (\n            <div>Error.....</div>\n        )\n    } else {\n        return (\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\" >\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                        style={{ minWidth: column.minWidth }}\n                                    >\n                                        {column.label}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {favoriteSongList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((favoriteSong) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={favoriteSong.storedId}>\n                                        <TableCell align='center'>\n                                            {favoriteSong.track? favoriteSong.track.name: '-'}\n                                        </TableCell >\n                                        <TableCell align='center'>\n                                            <Link href={favoriteSong.track?`/albumList/${favoriteSong.track.artists[0].id}`:\"\"} >\n                                                {favoriteSong.track?favoriteSong.track.artists[0].name:'-'}\n                                            </Link>\n                                        </TableCell>\n                                        <TableCell align='center'>\n                                            <Link href={favoriteSong.track?`/albums/songsList/${favoriteSong.track.album.id}`:\"\"}>\n                                                {favoriteSong.track?favoriteSong.track.album.name:'-'}\n                                            </Link>\n                                        </TableCell>\n                                        <TableCell align='center' onClick={()=>{handleRemoveSong(favoriteSong.storedId)}}>\n                                            <DeleteOutlinedIcon/>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={dataSize}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        );\n    }\n};\n\nexport default LikedPage\n\n\n\n\n\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Nav/TopNav.js",["177","178","179","180","181","182"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/addSong.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/NewRelease.js",["183"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar, Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n        appbar: {\n            background:'#006600',\n            marginLeft:'30px',\n            marginRight:'30px',\n            width: 'auto',\n            marginBottom:'30px',\n        },\n        card: {\n            maxWidth: 300,\n            height: 'auto',\n            marginLeft: '30px',\n            marginRight: '30px',\n            borderRadius: 5,\n            border: '1px solid #1e8678',\n            boxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n        },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    list_name:{\n        textAlign: 'center'\n    }\n});\n\nconst NewRelease=(props)=>{\n    const classes = useStyles();\n    const [ newAlbumList, setNewAlbumList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [ total, setTotal] =  useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error ||  response.statusCode  ===  404){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'albumlists'){\n                            console.log(body);\n                            setNewAlbumList(body.albums.items);\n                            setTotal(Math.ceil(body.albums.total / 24))\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/new-releases?limit=24&&offset=${page*24-24}`,'albumlists');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n    const buildCard = (list)  => {\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={list.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={`/albums/songsList/${list.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={list.icons ? list.icons[0].url : list.images[0].url} width='100%'/>\n\n                         <p className={classes.list_name}>{list.name}</p>\n\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    let card = newAlbumList && newAlbumList.map((playlist) => {\n        return buildCard(playlist);\n    });\n\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n            <div>\n                <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"New Release Albums\" />\n                    </AppBar>\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>\n                }\n            </div>\n\n        );\n    }\n}\nexport default withRouter(NewRelease);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/My404Component.js",["184","185"],"import React from \"react\";\nimport '../App.css';\n\n\n\nconst My404Component = () => {\n    const url = 'https://accounts.spotify.com/authorize?show_dialog=true&client_id=230be2f46909426b8b80cac36446b52a&scope=playlist-read-private%20playlist-read-collaborative%20playlist-modify-public%20user-read-recently-played%20playlist-modify-private%20ugc-image-upload%20user-follow-modify%20user-follow-read%20user-library-read%20user-library-modify%20user-read-private%20user-read-email%20user-top-read%20user-read-playback-state&response_type=token&redirect_uri=http://localhost:3000/callback';\n    const e = window.sessionStorage.getItem(\"userEmail\");\n    \n\n    return (\n        \n\t\t<div>\n\n            <p class = \"login\" style={{fontSize:'30px'}}>\n\n                404 Not Found &nbsp;\n                \n\n            </p>\n            \n\t\t</div>\n      \n    )\n};\n\nexport default My404Component;\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/removeSong.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/UserAccount.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/EditProfile.js",["186"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AddImage.js",["187"],{"ruleId":"188","severity":1,"message":"189","line":6,"column":13,"nodeType":"190","messageId":"191","endLine":6,"endColumn":26},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"188","severity":1,"message":"196","line":27,"column":21,"nodeType":"190","messageId":"191","endLine":27,"endColumn":33},{"ruleId":"197","severity":1,"message":"198","line":36,"column":6,"nodeType":"199","endLine":36,"endColumn":9,"suggestions":"200"},{"ruleId":"188","severity":1,"message":"201","line":8,"column":9,"nodeType":"190","messageId":"191","endLine":8,"endColumn":15},{"ruleId":"197","severity":1,"message":"202","line":129,"column":8,"nodeType":"199","endLine":129,"endColumn":14,"suggestions":"203"},{"ruleId":"188","severity":1,"message":"204","line":1,"column":26,"nodeType":"190","messageId":"191","endLine":1,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":41,"column":33,"nodeType":"207","messageId":"208","endLine":41,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":44,"column":37,"nodeType":"207","messageId":"208","endLine":44,"endColumn":39},{"ruleId":"205","severity":1,"message":"206","line":47,"column":35,"nodeType":"207","messageId":"208","endLine":47,"endColumn":37},{"ruleId":"205","severity":1,"message":"206","line":50,"column":34,"nodeType":"207","messageId":"208","endLine":50,"endColumn":36},{"ruleId":"205","severity":1,"message":"206","line":53,"column":37,"nodeType":"207","messageId":"208","endLine":53,"endColumn":39},{"ruleId":"205","severity":1,"message":"206","line":56,"column":44,"nodeType":"207","messageId":"208","endLine":56,"endColumn":46},{"ruleId":"205","severity":1,"message":"206","line":41,"column":25,"nodeType":"207","messageId":"208","endLine":41,"endColumn":27},{"ruleId":"205","severity":1,"message":"206","line":44,"column":33,"nodeType":"207","messageId":"208","endLine":44,"endColumn":35},{"ruleId":"197","severity":1,"message":"209","line":205,"column":7,"nodeType":"199","endLine":205,"endColumn":54,"suggestions":"210"},{"ruleId":"197","severity":1,"message":"209","line":231,"column":8,"nodeType":"199","endLine":231,"endColumn":67,"suggestions":"211"},{"ruleId":"188","severity":1,"message":"212","line":3,"column":10,"nodeType":"190","messageId":"191","endLine":3,"endColumn":18},{"ruleId":"197","severity":1,"message":"213","line":128,"column":8,"nodeType":"199","endLine":128,"endColumn":14,"suggestions":"214"},{"ruleId":"188","severity":1,"message":"215","line":8,"column":10,"nodeType":"190","messageId":"191","endLine":8,"endColumn":21},{"ruleId":"197","severity":1,"message":"216","line":211,"column":8,"nodeType":"199","endLine":211,"endColumn":36,"suggestions":"217"},{"ruleId":"188","severity":1,"message":"218","line":248,"column":17,"nodeType":"190","messageId":"191","endLine":248,"endColumn":21},{"ruleId":"197","severity":1,"message":"219","line":259,"column":8,"nodeType":"199","endLine":259,"endColumn":36,"suggestions":"220"},{"ruleId":"197","severity":1,"message":"221","line":271,"column":8,"nodeType":"199","endLine":271,"endColumn":36,"suggestions":"222"},{"ruleId":"197","severity":1,"message":"223","line":131,"column":3,"nodeType":"199","endLine":131,"endColumn":13,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":138,"column":54,"nodeType":"227","messageId":"228","endLine":138,"endColumn":56},{"ruleId":"225","severity":1,"message":"226","line":147,"column":67,"nodeType":"227","messageId":"228","endLine":147,"endColumn":69},{"ruleId":"225","severity":1,"message":"226","line":156,"column":56,"nodeType":"227","messageId":"228","endLine":156,"endColumn":58},{"ruleId":"197","severity":1,"message":"229","line":132,"column":7,"nodeType":"199","endLine":132,"endColumn":35,"suggestions":"230"},{"ruleId":"188","severity":1,"message":"204","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},{"ruleId":"188","severity":1,"message":"231","line":2,"column":16,"nodeType":"190","messageId":"191","endLine":2,"endColumn":26},{"ruleId":"188","severity":1,"message":"232","line":3,"column":8,"nodeType":"190","messageId":"191","endLine":3,"endColumn":18},{"ruleId":"188","severity":1,"message":"233","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":13},{"ruleId":"188","severity":1,"message":"234","line":59,"column":13,"nodeType":"190","messageId":"191","endLine":59,"endColumn":17},{"ruleId":"188","severity":1,"message":"235","line":59,"column":19,"nodeType":"190","messageId":"191","endLine":59,"endColumn":26},{"ruleId":"188","severity":1,"message":"236","line":60,"column":13,"nodeType":"190","messageId":"191","endLine":60,"endColumn":19},{"ruleId":"188","severity":1,"message":"237","line":60,"column":21,"nodeType":"190","messageId":"191","endLine":60,"endColumn":28},{"ruleId":"188","severity":1,"message":"238","line":61,"column":13,"nodeType":"190","messageId":"191","endLine":61,"endColumn":20},{"ruleId":"188","severity":1,"message":"239","line":61,"column":22,"nodeType":"190","messageId":"191","endLine":61,"endColumn":30},{"ruleId":"188","severity":1,"message":"240","line":114,"column":11,"nodeType":"190","messageId":"191","endLine":114,"endColumn":22},{"ruleId":"188","severity":1,"message":"232","line":10,"column":8,"nodeType":"190","messageId":"191","endLine":10,"endColumn":18},{"ruleId":"188","severity":1,"message":"241","line":14,"column":8,"nodeType":"190","messageId":"191","endLine":14,"endColumn":18},{"ruleId":"188","severity":1,"message":"242","line":62,"column":11,"nodeType":"190","messageId":"191","endLine":62,"endColumn":19},{"ruleId":"225","severity":1,"message":"243","line":72,"column":45,"nodeType":"227","messageId":"244","endLine":72,"endColumn":47},{"ruleId":"188","severity":1,"message":"245","line":8,"column":27,"nodeType":"190","messageId":"191","endLine":8,"endColumn":33},{"ruleId":"188","severity":1,"message":"246","line":8,"column":35,"nodeType":"190","messageId":"191","endLine":8,"endColumn":40},{"ruleId":"188","severity":1,"message":"247","line":8,"column":42,"nodeType":"190","messageId":"191","endLine":8,"endColumn":46},{"ruleId":"188","severity":1,"message":"196","line":24,"column":23,"nodeType":"190","messageId":"191","endLine":24,"endColumn":35},{"ruleId":"197","severity":1,"message":"198","line":29,"column":8,"nodeType":"199","endLine":29,"endColumn":11,"suggestions":"248"},{"ruleId":"188","severity":1,"message":"249","line":48,"column":11,"nodeType":"190","messageId":"191","endLine":48,"endColumn":14},{"ruleId":"197","severity":1,"message":"213","line":130,"column":8,"nodeType":"199","endLine":130,"endColumn":14,"suggestions":"250"},{"ruleId":"188","severity":1,"message":"249","line":7,"column":11,"nodeType":"190","messageId":"191","endLine":7,"endColumn":14},{"ruleId":"188","severity":1,"message":"251","line":8,"column":11,"nodeType":"190","messageId":"191","endLine":8,"endColumn":12},{"ruleId":"188","severity":1,"message":"252","line":49,"column":19,"nodeType":"190","messageId":"191","endLine":49,"endColumn":28},{"ruleId":"188","severity":1,"message":"253","line":44,"column":15,"nodeType":"190","messageId":"191","endLine":44,"endColumn":24},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["254"],"no-negated-in-lhs",["255"],"'setUserEmail' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onLoadAgain'. Either include it or remove the dependency array.","ArrayExpression",["256"],"'curUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.match.params.categories' and 'total'. Either include them or remove the dependency array.",["257"],"'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["258"],["259"],"'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'total'. Either include it or remove the dependency array.",["260"],"'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'getData' and 'total'. Either include them or remove the dependency array.",["261"],"'time' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has missing dependencies: 'audioControl', 'pauseSong', and 'songsPlay.playing'. Either include them or remove the dependency array.",["263"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["264"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'song.track.id'. Either include it or remove the dependency array.",["265"],"'withRouter' is defined but never used.","'Pagination' is defined but never used.","'Image' is defined but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'isLast' is assigned a value but never used.","'setLast' is assigned a value but never used.","'isFirst' is assigned a value but never used.","'setFirst' is assigned a value but never used.","'searchValue' is assigned a value but never used.","'playAction' is defined but never used.","'dispatch' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'Router' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.",["266"],"'url' is assigned a value but never used.",["267"],"'e' is assigned a value but never used.","'updateRes' is assigned a value but never used.","'returnImg' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"268","fix":"288"},{"desc":"276","fix":"289"},"Update the dependencies array to be: [e, onLoadAgain]",{"range":"290","text":"291"},"Update the dependencies array to be: [page, props.match.params.categories, total]",{"range":"292","text":"293"},"Update the dependencies array to be: [getData, props.match.params.id, props.match.params.type]",{"range":"294","text":"295"},"Update the dependencies array to be: [page, props.match.params.id, total, props.match.params.type, getData]",{"range":"296","text":"297"},"Update the dependencies array to be: [page, total]",{"range":"298","text":"299"},"Update the dependencies array to be: [getData, page, props.match.params.id, total]",{"range":"300","text":"301"},"Update the dependencies array to be: [dispatch, song, songsPlay.globalPlay]",{"range":"302","text":"303"},"Update the dependencies array to be: [songsPlay.globalPlay, song, songsPlay.playing, audioControl, pauseSong]",{"range":"304","text":"305"},"Update the dependencies array to be: [id, props.id]",{"range":"306","text":"307"},"Update the dependencies array to be: [song.track.id, songR, songsPlay.globalPlay]",{"range":"308","text":"309"},{"range":"310","text":"291"},{"range":"311","text":"299"},[1254,1257],"[e, onLoadAgain]",[3910,3916],"[page, props.match.params.categories, total]",[5944,5991],"[getData, props.match.params.id, props.match.params.type]",[6633,6692],"[page, props.match.params.id, total, props.match.params.type, getData]",[3597,3603],"[page, total]",[6301,6329],"[getData, page, props.match.params.id, total]",[6885,6913],"[dispatch, song, songsPlay.globalPlay]",[7224,7252],"[songsPlay.globalPlay, song, songsPlay.playing, audioControl, pauseSong]",[3131,3141],"[id, props.id]",[3369,3397],"[song.track.id, songR, songsPlay.globalPlay]",[1008,1011],[3926,3932]]