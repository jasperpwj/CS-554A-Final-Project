[{"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js":"1","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js":"2","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js":"3","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js":"4","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js":"5","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js":"6","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js":"7","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js":"8","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js":"9","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js":"10","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js":"11","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js":"12","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js":"13","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js":"14"},{"size":613,"mtime":1607666817163,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607665978552,"results":"17","hashOfConfig":"16"},{"size":1103,"mtime":1607666637793,"results":"18","hashOfConfig":"16"},{"size":237,"mtime":1607666854140,"results":"19","hashOfConfig":"16"},{"size":9047,"mtime":1607669823294,"results":"20","hashOfConfig":"16"},{"size":9698,"mtime":1607783412892,"results":"21","hashOfConfig":"16"},{"size":5833,"mtime":1607674926261,"results":"22","hashOfConfig":"16"},{"size":5907,"mtime":1607666653211,"results":"23","hashOfConfig":"16"},{"size":8832,"mtime":1607782999975,"results":"24","hashOfConfig":"16"},{"size":171,"mtime":1607666835606,"results":"25","hashOfConfig":"16"},{"size":7031,"mtime":1607666653210,"results":"26","hashOfConfig":"16"},{"size":5893,"mtime":1607705140874,"results":"27","hashOfConfig":"16"},{"size":2125,"mtime":1607707154225,"results":"28","hashOfConfig":"16"},{"size":800,"mtime":1607707052068,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1gr11ca",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js",[],["65","66"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js",["67","68","69"],"import React, { useState, useEffect } from \"react\";\nimport {  withRouter } from 'react-router-dom';\nimport Song from './Song';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { makeStyles } from '@material-ui/core';\nimport Information from './Infotmation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport playAction from '../actions/playAction'\nconst useStyles = makeStyles({\n\tcard: {\n\t\tmaxWidth: 250,\n\t\theight: 'auto',\n\t\tmarginLeft: 'auto',\n\t\tmarginRight: 'auto',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n    },\n    play_control_header:{\n        width:'200px',\n    },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tsong_li: {\n        listStyleType: 'none',\n        borderBottom: '1px solid #666',\n        display: 'flex',\n        lineHeight: 'normal',\n        fontSize: '14px',\n        cursor: 'pointer',\n        '&:hover':{\n            color: '#1db954',\n            background: '#bbbebc'\n        }\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title: {\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album:{\n        width: '250px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist:{\n        width: '200px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length:{\n        width: '60px',\n    },\n    song_icon:{\n        width: '60px',\n        textAlign:'center',\n        position: 'relative',\n        top: '10px'\n    },\n    song_length_header: {\n        width: '100px'\n    },\n    song_added:{\n        width: '150px'\n    },\n    song_added_header: {\n        width: '200px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px',\n        marginLeft:'30px',\n        marginRight:'30px',\n        background:'#ccffcc',\n\n    },\n\tpages: {\n\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    link: {\n        textDecoration: 'none',\n        color: 'black',\n        '&:hover':{\n            textDecoration: 'underline'\n        }\n    },\n    linkhover :{\n        textDecoration: 'underline'\n    }\n\n});\nconst SongList = (props)=>{\n    const classes = useStyles();\n    const dispatch =  useDispatch();\n    const [ page, setPage ] = useState(1);\n    const [ song, setSong ] = useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [ total, setTotal] = useState(undefined);\n    const [ description, setDescription] = useState(undefined);\n    const [ image, setImage] = useState(undefined);\n    const [ follow, setFollow] = useState(undefined);\n    const [ name, setName] = useState(undefined);\n    const [ owner, setOwner] = useState(undefined);\n    const [ date, setDate] = useState(undefined);\n    const [ artists, setArtists] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'playlists'){\n                            //console.log(body)\n                            setDescription(body.description||body.label);\n                            setImage(body.images[0].url);\n                            setFollow(body.followers?body.followers.total:body.popularity);\n                            setName(body.name);\n                            setOwner(body.owner?body.owner.display_name:'author');\n                            setArtists(body.artists);\n                            setDate(body.release_date);\n                        }\n                        if(type === 'song'){\n                            // console.log(body);\n                            setTotal(Math.ceil(body.total / 10));\n                            setSong(body.items);\n                            dispatch(playAction.updateSongList(body.items, props.match.params.type));\n\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n    useEffect(()=>{\n        async function fetchData(){\n            try{\n                await getData(`https://api.spotify.com/v1/${props.match.params.type}/${props.match.params.id}`, 'playlists')\n            }catch(e){\n                console.log(e);\n            }\n        }\n        fetchData();\n    },[props.match.params.id,props.match.params.type])\n\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n                await getData(`https://api.spotify.com/v1/${props.match.params.type}/${props.match.params.id}/tracks?limit=10&&offset=${page*10-10}`,'song');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page, props.match.params.id,total,props.match.params.type]);\n    const changePageHandle = (event, page) => {\n\t\tsetPage(page);\n\t\tif (page === 1) {\n\t\t\tsetFirst(true);\n\t\t} else {\n\t\t\tsetFirst(false);\n\t\t};\n\t\tif (page === total) {\n\t\t\tsetLast(true);\n\t\t} else {\n\t\t\tsetLast(false);\n\t\t}\n    }\n\n    const buildList = (song, index)=>{\n        console.log(index);\n        return (\n            <Song song={song} key={song.id?song.id:song.track.id} index={index}></Song>\n        )\n    }\n    let related_album = [];\n    let NewSong = null;\n    let card = song && song.map((song, index) => {\n        if(!song.track){\n            NewSong = {\n                track:song\n            }\n        }else{\n            NewSong =  song;\n        }\n\n        if(song.track){\n            related_album.push(song.track.album.images[1]);\n        }\n        return buildList(NewSong, index);\n    });\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n\n        <div>\n            <div>\n                <Information artists={artists} date={date} name={name} image={image}  id='' popularity=''  follower={follow} description={description} owner={owner} related_album={related_album}></Information>\n            </div>\n            <div className={classes.song_header_container}>\n            <div className={classes.play_control_header}>\n\n            </div>\n            <div className={classes.song_title_header}>\n                <p>Title</p>\n            </div>\n            <div className={classes.song_artist_header}>\n                <p>Artist</p>\n            </div>\n            <div className={classes.song_album_header}>\n                <p>Album</p>\n            </div>\n            <div className={classes.song_added_header}>\n                <p>Date</p>\n            </div>\n            <div className={classes.song_length_header}>\n            <p>Duration</p>\n            </div>\n            </div>\n            {card}\n            {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n            </div>}\n            </div>\n        );\n    }\n\n\n\n}\nexport default withRouter(SongList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js",["70","71"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js",["72"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar,Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n        marginBottom:'30px',\n    },\n\tcard: {\n\t\tmaxWidth: 200,\n\t\theight: 'auto',\n\t\tmarginLeft: '30px',\n\t\tmarginRight: '30px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst GenresList = (props) =>{\n    const classes = useStyles();\n    const [ genresList, setGenresList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [total, setTotal] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n    let card = null;\n\n    async function getData(url){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                    setTotal(Math.ceil(body.categories.total / 24));\n                    setGenresList(body.categories.items);\n                    setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories?limit=24&&offset=${page*24-24}`);\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n\n        const buildCard = (genre)  => {\n            return(\n                <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={genre.id}>\n                    <Card className={classes.card} variant='outlined'>\n                    <CardActionArea>\n                        <Link to={`/${genre.id}/playList`}>\n                        <div className='category-image'>\n                            <img alt=\"category\" src={genre.icons ? genre.icons[0].url : genre.images[0].url} width='100%'/>\n\n                             <p className='category-name'>{genre.name}</p>\n\n                        </div>\n                        </Link>\n                    </CardActionArea>\n                    </Card>\n                </Grid>\n            );\n        };\n        card = genresList && genresList.map((genre) => {\n            return buildCard(genre);\n        });\n        if(loading){\n            return (\n                <div>\n                    <h2>Loading....</h2>\n                </div>\n            );\n        }else if(error){\n            return (\n                <div>\n                    <h2>Error....</h2>\n                </div>\n            );\n        }else {\n            return (\n                <div>\n                    <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All Categories\" />\n                    </AppBar>\n                    <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                    </Grid>\n                    {total === 1?<div className={classes.pages}>No More</div>:\n                    <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                    </div>}\n\n                </div>\n            );\n        }\n\n};\n\nexport default withRouter(GenresList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js",["73"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar, Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n        appbar: {\n            background:'#006600',\n            marginLeft:'30px',\n            marginRight:'30px',\n            width: 'auto',\n            marginBottom:'30px',\n        },\n        card: {\n            maxWidth: 300,\n            height: 'auto',\n            marginLeft: '30px',\n            marginRight: '30px',\n            borderRadius: 5,\n            border: '1px solid #1e8678',\n            boxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n        },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst PlayList=(props)=>{\n    const classes = useStyles();\n    const [ playList, setPlayList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [ total, setTotal] =  useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error ||  response.statusCode  ===  404){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'playlists'){\n                            setPlayList(body.playlists.items);\n                            setTotal(Math.ceil(body.playlists.total / 24))\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories/${props.match.params.categories}/playlists?limit=24&&offset=${page*24-24}`,'playlists');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n    const buildCard = (playlist)  => {\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={playlist.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={`/playlists/songsList/${playlist.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={playlist.icons ? playlist.icons[0].url : playlist.images[0].url} width='100%'/>\n\n                         <p className='category-name'>{playlist.name}</p>\n\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    let card = playList && playList.map((playlist) => {\n        return buildCard(playlist);\n    });\n\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n            <div>\n                <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All PlayLists\" />\n                    </AppBar>\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>\n                }\n            </div>\n\n        );\n    }\n}\nexport default withRouter(PlayList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js",["74","75","76","77","78"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js",["79","80","81","82","83","84","85"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport download from '../img/download.jpeg'\n\nimport {Chip, Avatar, Link} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: '#ccffcc',\n    display: 'flex',\n    height: 400,\n    margin: '30px',\n  },\n  details: {\n    marginTop:'20px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '0.7 0 auto',\n    padding:0\n  },\n  cover: {\n    margin:'20px',\n    width: 400,\n\n  },\n  name: {\n    textAlign: 'left',\n\n    letterSpacing: '1px',\n    marginLeft: '200px',\n    fontWeight: 500,\n    fontSize: '40px'\n  },\n  tag:{\n    display: 'flex',\n    textAlign: 'left',\n    fontWeight: 500,\n    lineHeight: 4,\n    marginLeft: '200px'\n  },\n  chip:{\n    marginLeft:'7px',\n    background: '#666600'\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n  detail: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  related:{\n    textAlign: 'left',\n      display:'flex',\n      marginLeft:'200px',\n      fontWeight: 500,\n      lineHeight:2.75,\n  },\n  related_icon:{\n    textAlign: 'left',\n      display:'flex',\n  },\n  icon:{\n      marginLeft:'5px'\n  },\n  span_label:{\n      marginRight:'20px'\n  }\n}));\n\nexport default function Information(props) {\n  const classes = useStyles();\n  const {name, image, genre,id,popularity,follower,description, owner, related_album, date, artists} = props;\n  const [related, setRelated] = useState(undefined);\n\n\n  async function getData(url, type){\n    var request = require('request');\n    var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n    var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n    var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n    };\n    request.post(authOptions,function(error, response,body){\n        if (!error && response.statusCode === 200) {\n                var token = body.access_token;\n                var options = {\n                    url: url,\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    },\n                    json: true\n                };\n                request.get(options, function(error, response, body) {\n                    setRelated(body.artists);\n                });\n        }\n    });\n}\n\nconst handleJump=(id)=>{\n    if(id){\n        window.location.href=`/albumList/${id}`;\n    }\n}\n\nuseEffect(() => {\n    async function fetchData(){\n        try{\n            if(id){\n            await getData(`https://api.spotify.com/v1/artists/${id}/related-artists`,'related');\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    fetchData();\n},[props.id])\n\n  let genres = genre && genre.map((genre, index)=>{\n    return (\n        <Chip color=\"primary\" size=\"small\" label={genre} className={classes.chip} key={index}/>\n    )\n  });\n    let imageIcon = related && related.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon} key={index}>\n                    <Avatar alt=\"Remy Sharp\" src={e.images[1].url} className={classes.large}  onClick={()=>handleJump(e.id)}/>\n                </div>\n                )\n        }\n    });\n    let imageAlbum = related_album && related_album.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon} key={index}>\n                    <Avatar alt=\"Remy Sharp\" src={e.url} className={classes.large} />\n                </div>\n                )\n        }\n    });\n    let imageArtist = artists && artists.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon}key={index}>\n                    <Avatar alt=\"Remy Sharp\"  className={classes.large}  onClick={()=>handleJump(e.id)}>{e.name}</Avatar>\n                </div>\n                )\n        }\n    });\n\n  return (\n    <Card className={classes.root}>\n        <CardMedia\n        className={classes.cover}\n        image={image?image:download}\n        title=\"photo\"\n        />\n        <div className={classes.details}>\n            <CardContent className={classes.content}>\n                <div component=\"h5\" variant=\"h5\" className={classes.name}>\n                    {name}\n                </div>\n                <div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>{genre?'Styles:':'Description:'}</span>\n                    {genre?<div>\n                        {genres}\n                        </div>:<div>\n                        {description}\n\n                    </div>\n                    }\n\n                </div>\n                {popularity?<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Popularity:</span>\n                    <div >\n                    {popularity}\n                    </div>\n                </div>:owner=='author'?<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Release Date:</span>\n                    <div >\n                    {date}\n                    </div>\n                </div>:<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Owner:</span>\n                    <div >\n                    {owner}\n                    </div>\n                </div>\n                }\n                <div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Followers:</span>\n                    <div >\n                    {follower}\n                    </div>\n                </div>\n\n            </CardContent>\n            {id?<div className={classes.related}>\n                <span className={classes.span_label}>Related Artists:</span>\n                <div className={classes.related_icon}>\n                   {imageIcon}\n                </div>\n            </div>: !artists?<div className={classes.related}>\n                <span className={classes.span_label}>Related Albums:</span>\n                <div className={classes.related_icon}>\n                   {imageAlbum}\n                </div>\n            </div>:<div className={classes.related}>\n                <span className={classes.span_label}>Related Artists:</span>\n                <div className={classes.related_icon}>\n                   {imageArtist}\n                </div>\n            </div>}\n        </div>\n    </Card>\n  );\n}\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js",["86","87"],"import React, { useState, useEffect } from \"react\";\nimport { Link, withRouter } from 'react-router-dom';\nimport LibraryAddOutlined from '@material-ui/icons/LibraryAddOutlined';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\nimport moment from \"moment\";\nimport { makeStyles } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport playAction from '../actions/playAction'\nimport axios from 'axios'\n\nconst useStyles = makeStyles({\n\tsong_li: {\n        listStyleType: 'none',\n        borderBottom: '1px solid #666',\n        display: 'flex',\n        lineHeight: 'normal',\n        fontSize: '14px',\n        cursor: 'pointer',\n        marginLeft:'30px',\n        marginRight:'30px',\n        '&:hover':{\n            color: '#000000',\n            background: '#f2ffe5'\n        }\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title: {\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album:{\n        width: '250px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist:{\n        width: '200px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length:{\n        width: '100px',\n    },\n    song_icon:{\n        width: '100px',\n        textAlign:'left',\n        position: 'relative',\n        top: '10px',\n        '&:hover':{\n            color: '#8c8c8c',\n        }\n    },\n    song_length_header: {\n        width: '100px'\n    },\n    song_added:{\n        width: '200px'\n    },\n    song_added_header: {\n        width: '150px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px'\n    },\n    play_control:{\n        width:'100px',\n        textAlign:'center',\n        position: 'relative',\n        top: '10px',\n        '&:hover':{\n            color: '#8c8c8c',\n        }\n\n    },\n    link: {\n        textDecoration: 'none',\n        color: 'black',\n        '&:hover':{\n            textDecoration: 'underline'\n        }\n    },\n    linkhover :{\n        textDecoration: 'underline'\n    }\n\n});\nconst Song = (props)=>{\n    const classes = useStyles();\n    const [ play, setPlay] = useState(false);\n    const [ pause, setPause] = useState(true);\n    const allState = useSelector((state) => state);\n    const songsPlay = allState.songsPlay;\n    const songR = allState.songsPlay.song;\n    const dispatch = useDispatch();\n    const {song, index}=props;\n    function timeFormat(time){\n        const min = Math.floor(time/60000);\n        const sec = ((time % 60000) / 1000).toFixed(0);\n        return min+\":\"+(sec < 10 ? \"0\" : \"\")+sec;\n    }\n\n\n    useEffect(()=>{\n        if(songsPlay.globalPlay&&song.track.id===songR.track.id){\n            setPlay(true);\n        }else{\n            setPlay(false);\n        }\n    },[songR,songsPlay.globalPlay])\n\n\n\n    const handleChange=(song)=>{\n        if(play){\n            dispatch(playAction.pauseSong());\n            setPause(true);\n            setPlay(false);\n            //pauseSong();\n\n        }else{\n            if(song.track.preview_url){\n                console.log(song);\n                dispatch(playAction.playSong(song,index));\n                setPause(false);\n                setPlay(true);\n                //audioControl(song);\n            }else{\n                dispatch(playAction.toSong(song));\n            }\n        }\n    }\n    const handleAdd=(song)=>{\n        //console.log(song);\n        const addSong = {\n            artist: song.track.artists[0].name,\n            album: song.track.album?song.track.album.name : '',\n            artistId:song.track.artists[0].id,\n            albumId:song.track.album?song.track.album.id : '',\n            songName:song.track.name,\n            playUrl:song.track.preview_url,\n            songId:song.track.id,\n        }\n        console.log(addSong);\n        axios.post('http://localhost:5000/songs/addLikeSongs', addSong);\n\n    }\n\n    return (\n        <li className={classes.song_li} >\n            <div  className={classes.play_control} onClick={()=>handleChange(song, index)}>\n                {play&&songsPlay.globalPlay&&song.track.id===songR.track.id?<PauseCircleOutlineIcon></PauseCircleOutlineIcon>\n                :\n                <PlayCircleOutlineIcon  ></PlayCircleOutlineIcon>\n                }\n            </div>\n            <div className={classes.song_icon} onClick={()=>handleAdd(song)}>\n                <i>\n                <LibraryAddOutlined></LibraryAddOutlined>\n                </i>\n            </div>\n            <div className={classes.song_title}>\n                <p>{song.track? song.track.name : song.name}</p>\n            </div>\n\n            <Link to={song.track?`/albumList/${song.track.artists[0].id}`:`/albumList/${song.artists[0].id}`} className={classes.link}>\n            <div className={classes.song_artist}>\n                <p>{song.track?song.track.artists[0].name:song.artists[0].name}</p>\n            </div>\n            </Link>\n            {song.track.album?\n            <Link to={`/albums/songsList/${song.track.album.id}`} className={classes.link}>\n            <div className={classes.song_album}>\n                <p>{song.track?song.track.album.name:'-'}</p>\n            </div>\n            </Link>:\n            <div className={classes.song_album}>\n                <p>{song.album?song.album.name:'-'}</p>\n            </div>}\n\n            <div className={classes.song_added}>\n                <p>{song.track? moment(song.added_at).format(\"YYYY-MM-DD\") : song.album?song.album.release_date:'-'}</p>\n            </div>\n\n            <div className={classes.song_length}>\n                <p>{song.track?timeFormat(song.track.duration_ms):timeFormat(song.duration_ms)}</p>\n            </div>\n\n        </li>\n    )\n}\nexport default withRouter(Song);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js",["88"],"import { json } from \"body-parser\";\n\nconst initalState = {\n    playing: false,\n    playTime: 0,\n    song: '',\n    //Pause: true,\n    globalPlay: false,\n    songList:[],\n    currentIndex:0\n\n}\nlet copyState = null\nconst songPlayer = (state = initalState, action) => {\n    const {type, song, songList, currentIndex, track} = action;\n\n    switch(type) {\n        case \"PLAY_SONG\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.globalPlay = true;\n            copyState.song = song;\n            copyState.playing = true;\n            copyState.currentIndex  =  currentIndex;\n            console.log(copyState);\n            return copyState\n\n        case \"TO_SONG\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.globalPlay = false;\n            copyState.song = song;\n            copyState.playing = true;\n            copyState.currentIndex  =  currentIndex;\n            return copyState\n\n        case \"STOP_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = false;\n            copyState.playing = false;\n            return copyState;\n\n        case \"PAUSE_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = false;\n            copyState.playing = false;\n            return copyState;\n\n\n\n        case \"RESUME_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = true;\n            copyState.playing = true;\n            return copyState;\n\n        case \"UPDATE_SONG_LIST\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.songList = songList;\n            copyState.track = track;\n            return copyState\n\n        case \"UPDATE_INDEX\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.currentIndex  =  currentIndex;\n            return copyState\n\n        case \"INCREASE_SONG_TIME\":\n            return {\n                ...state,\n                timeElapsed: action.time\n            };\n        default:\n            return state;\n }\n};\nexport default songPlayer;","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":7,"column":10,"nodeType":"95","messageId":"96","endLine":7,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":202,"column":7,"nodeType":"99","endLine":202,"endColumn":54,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"98","line":228,"column":8,"nodeType":"99","endLine":228,"endColumn":67,"suggestions":"101"},{"ruleId":"93","severity":1,"message":"94","line":8,"column":10,"nodeType":"95","messageId":"96","endLine":8,"endColumn":21},{"ruleId":"97","severity":1,"message":"102","line":204,"column":8,"nodeType":"99","endLine":204,"endColumn":36,"suggestions":"103"},{"ruleId":"97","severity":1,"message":"104","line":126,"column":8,"nodeType":"99","endLine":126,"endColumn":14,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"106","line":126,"column":8,"nodeType":"99","endLine":126,"endColumn":14,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":92,"column":37,"nodeType":"110","messageId":"111","endLine":92,"endColumn":39},{"ruleId":"108","severity":1,"message":"112","line":166,"column":46,"nodeType":"110","messageId":"113","endLine":166,"endColumn":48},{"ruleId":"93","severity":1,"message":"114","line":243,"column":17,"nodeType":"95","messageId":"96","endLine":243,"endColumn":21},{"ruleId":"97","severity":1,"message":"115","line":254,"column":8,"nodeType":"99","endLine":254,"endColumn":36,"suggestions":"116"},{"ruleId":"97","severity":1,"message":"117","line":266,"column":8,"nodeType":"99","endLine":266,"endColumn":36,"suggestions":"118"},{"ruleId":"93","severity":1,"message":"119","line":2,"column":22,"nodeType":"95","messageId":"96","endLine":2,"endColumn":30},{"ruleId":"93","severity":1,"message":"120","line":8,"column":23,"nodeType":"95","messageId":"96","endLine":8,"endColumn":27},{"ruleId":"97","severity":1,"message":"121","line":131,"column":3,"nodeType":"99","endLine":131,"endColumn":13,"suggestions":"122"},{"ruleId":"108","severity":1,"message":"112","line":138,"column":54,"nodeType":"110","messageId":"113","endLine":138,"endColumn":56},{"ruleId":"108","severity":1,"message":"112","line":147,"column":67,"nodeType":"110","messageId":"113","endLine":147,"endColumn":69},{"ruleId":"108","severity":1,"message":"112","line":156,"column":56,"nodeType":"110","messageId":"113","endLine":156,"endColumn":58},{"ruleId":"123","severity":1,"message":"124","line":194,"column":29,"nodeType":"125","messageId":"126","endLine":194,"endColumn":31},{"ruleId":"93","severity":1,"message":"127","line":100,"column":13,"nodeType":"95","messageId":"96","endLine":100,"endColumn":18},{"ruleId":"97","severity":1,"message":"128","line":119,"column":7,"nodeType":"99","endLine":119,"endColumn":35,"suggestions":"129"},{"ruleId":"93","severity":1,"message":"130","line":1,"column":10,"nodeType":"95","messageId":"96","endLine":1,"endColumn":14},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["133"],["134"],"React Hook useEffect has missing dependencies: 'getData' and 'total'. Either include them or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'total'. Either include it or remove the dependency array.",["136"],"React Hook useEffect has missing dependencies: 'props.match.params.categories' and 'total'. Either include them or remove the dependency array.",["137"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'time' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["138"],"React Hook useEffect has missing dependencies: 'audioControl', 'pauseSong', and 'songsPlay.playing'. Either include them or remove the dependency array.",["139"],"'useTheme' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["140"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'pause' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'song.track.id'. Either include it or remove the dependency array.",["141"],"'json' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [getData, props.match.params.id, props.match.params.type]",{"range":"160","text":"161"},"Update the dependencies array to be: [page, props.match.params.id, total, props.match.params.type, getData]",{"range":"162","text":"163"},"Update the dependencies array to be: [getData, page, props.match.params.id, total]",{"range":"164","text":"165"},"Update the dependencies array to be: [page, total]",{"range":"166","text":"167"},"Update the dependencies array to be: [page, props.match.params.categories, total]",{"range":"168","text":"169"},"Update the dependencies array to be: [dispatch, song, songsPlay.globalPlay]",{"range":"170","text":"171"},"Update the dependencies array to be: [songsPlay.globalPlay, song, songsPlay.playing, audioControl, pauseSong]",{"range":"172","text":"173"},"Update the dependencies array to be: [id, props.id]",{"range":"174","text":"175"},"Update the dependencies array to be: [song.track.id, songR, songsPlay.globalPlay]",{"range":"176","text":"177"},[5933,5980],"[getData, props.match.params.id, props.match.params.type]",[6622,6681],"[page, props.match.params.id, total, props.match.params.type, getData]",[6207,6235],"[getData, page, props.match.params.id, total]",[3586,3592],"[page, total]",[3856,3862],"[page, props.match.params.categories, total]",[6692,6720],"[dispatch, song, songsPlay.globalPlay]",[7031,7059],"[songsPlay.globalPlay, song, songsPlay.playing, audioControl, pauseSong]",[3147,3157],"[id, props.id]",[2937,2965],"[song.track.id, songR, songsPlay.globalPlay]"]