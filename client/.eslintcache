[{"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js":"1","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js":"2","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js":"3","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js":"4","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/serviceWorker.js":"5","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/UserProfile.js":"6","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js":"7","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Register/Register.js":"8","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Login/Login.js":"9","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js":"10","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Home.js":"11","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js":"12","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js":"13","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js":"14","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/libs/contextLib.js":"15","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js":"16","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js":"17","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js":"18","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js":"19","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js":"20","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Search.js":"21","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/LikedPage.js":"22","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Nav/TopNav.js":"23","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/addSong.js":"24"},{"size":668,"mtime":1607783535424,"results":"25","hashOfConfig":"26"},{"size":2547,"mtime":1607913319926,"results":"27","hashOfConfig":"26"},{"size":237,"mtime":1607666854140,"results":"28","hashOfConfig":"26"},{"size":362,"mtime":1607665978552,"results":"29","hashOfConfig":"26"},{"size":5086,"mtime":1607783535425,"results":"30","hashOfConfig":"26"},{"size":2408,"mtime":1607783535423,"results":"31","hashOfConfig":"26"},{"size":5907,"mtime":1607666653211,"results":"32","hashOfConfig":"26"},{"size":6824,"mtime":1607783535423,"results":"33","hashOfConfig":"26"},{"size":3943,"mtime":1607783535422,"results":"34","hashOfConfig":"26"},{"size":8982,"mtime":1607800935746,"results":"35","hashOfConfig":"26"},{"size":1152,"mtime":1607783535422,"results":"36","hashOfConfig":"26"},{"size":5790,"mtime":1607783535421,"results":"37","hashOfConfig":"26"},{"size":9638,"mtime":1607801371669,"results":"38","hashOfConfig":"26"},{"size":9037,"mtime":1607915950250,"results":"39","hashOfConfig":"26"},{"size":168,"mtime":1607783535424,"results":"40","hashOfConfig":"26"},{"size":171,"mtime":1607666835606,"results":"41","hashOfConfig":"26"},{"size":7031,"mtime":1607666653210,"results":"42","hashOfConfig":"26"},{"size":6154,"mtime":1607917179283,"results":"43","hashOfConfig":"26"},{"size":2125,"mtime":1607801079130,"results":"44","hashOfConfig":"26"},{"size":802,"mtime":1607801070259,"results":"45","hashOfConfig":"26"},{"size":7522,"mtime":1607913319927,"results":"46","hashOfConfig":"26"},{"size":5880,"mtime":1607918233449,"results":"47","hashOfConfig":"26"},{"size":5876,"mtime":1607913319926,"results":"48","hashOfConfig":"26"},{"size":584,"mtime":1607916665007,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"1gr11ca",{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"53"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"53"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"53"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"53"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"53"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"53"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"53"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"53"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"53"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/index.js",["116"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["117","118"],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/App.js",["119","120","121"],"import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport Login from './components/Login/Login';\nimport Register from './components/Register/Register'\n\nimport AlbumList from './components/AlbumList'\nimport GenresList from './components/GenresList'\nimport PlayList from './components/PlayList'\nimport SongList from './components/SongList'\nimport Songplay from './components/SongPlay'\nimport TopNav from './components/Nav/TopNav'\nimport { AppContext } from \"./libs/contextLib\";\nimport Search from './components/Search';\nimport LikedPage from './components/LikedPage';\n\n\nfunction App() {\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n  const e = window.sessionStorage.getItem(\"userEmail\");\n  const [userEmail, setUserEmail]= useState(e);\n\n\n\n  console.log(\"user email: \" + userEmail);\n  console.log(\"userHasAuthenticated: \" + isAuthenticated);\n\n  useEffect(() => {\n    onLoadAgain();\n  }, [e]);\n  \n  async function onLoadAgain() {\n    if (userEmail) {\n      userHasAuthenticated(true);\n    }else{\n      console.log(\"user email is empty\");\n      userHasAuthenticated(false);\n    }\n\n  }\n\n  if (window.location.href.includes(\"access_token\")) {\n    return (\n      <UserProfile />\n        \n    );\n  }\n  \n  return (\n    // !isAuthenticating && (\n      <Router>\n        <div>\n        <TopNav></TopNav>\n        <Songplay></Songplay>\n\n\n          <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\n            {/* Yichao's routes */}\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/userprofile\" component={UserProfile} />\n\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            {/* Weijie's routes */}\n            <Route exact path=\"/likedpage\" component={LikedPage} />\n\n            {/* Rupu's routes */}\n            <Route exact path='/' component={GenresList} />\n            <Route exact path='/:categories/playList' component={PlayList} />\n            <Route exact path='/:type/songsList/:id' component={SongList} />\n            <Route exact path='/albumList/:id' component={AlbumList} />\n            {/* Donglin's routes */}\n            <Route exact path='/search' component={Search} />\n          </AppContext.Provider>\n\n          \n\n\n        </div>\n      </Router>\n    // )\n  );\n}\n\nexport default App;\n\n\n\n\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/store.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reportWebVitals.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/serviceWorker.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/UserProfile.js",["122"],"import '../App.css';\nimport React, {useState, useEffect} from 'react';\n\n\nconst UserProfile = (props) => {\n    const playerUrl = \"https://open.spotify.com\";\n    const [userData, setUserData] = useState(''); \n    var curUrl = window.location;\n    // console.log(\"url: \" + curUrl);\n\n\n    const hash = window.location.hash.substr(1); //url of the current page\n    const arHash = hash.split('='); //this creates an array with key ([0] element) and value ([1] element)\n    const hash_value =  arHash[1];\n\n    const accessToken = hash_value;\n\n\n    useEffect(() => {\n        async function fetchData(){\n            try{\n                const url = \"https://api.spotify.com/v1/me/\";\n\n                const options = {\n                    headers: {\n                        Authorization: \"Bearer \" + accessToken\n                    }\n                };\n                fetch(url, options)\n                .then( res => res.json() )\n                // .then( data => console.log(\"typeof data: \" + typeof data))\n                .then( data => {\n                    console.log(data);\n                    console.log(\"test\");\n                    setUserData(data)\n                } );\n            } catch (e) {\n                console.log(e);\n                // setError(true);\n            }\n        }\n\n        fetchData();\n    }, [accessToken]);\n \n\n    return (\n\t\t<div>\n  \n        <p class = \"login\" style={{fontSize:'30px'}}>\n  \n          Login Successful!\n        </p>\n\n        \n        <p class = \"login\" style={{fontSize:'30px'}}>\n\n                <a\n                    href= {playerUrl}\n                >\n                    Spotify official player\n                </a>\n\t\t</p>\n\n\n        <p style={{fontSize:'50px'}}>\n            The user's profile:\n\t\t</p>\n\n        <p style={{fontSize:'25px'}}>\n            Country: {userData.country} \n\t\t</p>\n\n        <p style={{fontSize:'25px'}}>\n            Name: {userData.display_name}\n\t\t</p>\n\n        <p style={{fontSize:'25px'}}>\n            Email: {userData.email}\n\t\t</p>\n\n        {/* <p style={{fontSize:'25px'}}>\n            External url:  \n                <a\n                    href= {userData.external_urls.spotify}\n                >\n                    Click to open\n                </a>\n\t\t</p> */}\n\n        <p style={{fontSize:'25px'}}>\n            Account type: {userData.product}\n\t\t</p>\n              \n      </div>\n\n        \n    )\n};\n\nexport default UserProfile;\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/PlayList.js",["123"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar, Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n        appbar: {\n            background:'#006600',\n            marginLeft:'30px',\n            marginRight:'30px',\n            width: 'auto',\n            marginBottom:'30px',\n        },\n        card: {\n            maxWidth: 300,\n            height: 'auto',\n            marginLeft: '30px',\n            marginRight: '30px',\n            borderRadius: 5,\n            border: '1px solid #1e8678',\n            boxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n        },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst PlayList=(props)=>{\n    const classes = useStyles();\n    const [ playList, setPlayList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [ total, setTotal] =  useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error ||  response.statusCode  ===  404){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'playlists'){\n                            setPlayList(body.playlists.items);\n                            setTotal(Math.ceil(body.playlists.total / 24))\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories/${props.match.params.categories}/playlists?limit=24&&offset=${page*24-24}`,'playlists');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n    const buildCard = (playlist)  => {\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={playlist.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={`/playlists/songsList/${playlist.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={playlist.icons ? playlist.icons[0].url : playlist.images[0].url} width='100%'/>\n\n                         <p className='category-name'>{playlist.name}</p>\n\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    let card = playList && playList.map((playlist) => {\n        return buildCard(playlist);\n    });\n\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n            <div>\n                <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All PlayLists\" />\n                    </AppBar>\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>\n                }\n            </div>\n\n        );\n    }\n}\nexport default withRouter(PlayList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Register/Register.js",["124","125","126","127","128","129","130"],"import React, {useState, useEffect} from 'react';\n// import user from '../../data/users';\nimport \"./Register.css\";\nimport axios from 'axios'\n\n\nfunction RegistrationForm(props) {\n    const [state , setState] = useState({\n        firstname: \"\",\n        lastname:\"\",\n        gender:\"\",\n        email : \"\",\n        password : \"\"\n    })\n    const [userEmail , setUserEmail] = useState(\"\");\n    const [registerError, setRegisterError] = useState(null);\n\n\n    console.log(\"email: \" + userEmail);\n    // console.log(\"error: \" + JSON.stringify(registerError));\n    console.log(\"error: \" + registerError);\n\n    \n\n\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        try {\n            if (state.firstname == \"\") {\n                alert(\"firstname cannot be null\");\n            }\n            else if (state.lastname == \"\") {\n                alert(\"lastname cannot be null\");\n            }\n            else if (state.gender == \"\") {\n                alert(\"gender cannot be null\");\n            }\n            else if (state.email == \"\") {\n                alert(\"email cannot be null\");\n            }\n            else if (state.password == \"\") {\n                alert(\"password cannot be null\");\n            }\n            else if (state.confirmPassword == \"\") {\n                alert(\"confirmPassword cannot be null\");\n            }\n            if (state.password === state.confirmPassword) {\n                const user = {\n                    firstName: state.firstname,\n                    lastName: state.lastname,\n                    gender: state.gender,\n                    email: state.email,\n                    password: state.password\n                };\n                try {\n                    axios.post('http://localhost:5000/users/add', user)\n                    .then(response => setUserEmail(response.data.email ))\n                    .catch(error => {\n                        setRegisterError(error.message);\n                    })\n                } catch (error){\n                    console.log(error);\n                }\n            }\n            else{\n                alert(\"two passwords are different\");\n\n            }\n\n            \n                \n            \n\n            \n        }\n        catch(e) {\n            console.log(\"error: \" + e);\n        }\n    }\n\n    \n\n    if (registerError) {\n\n        return(\n            <p style={{fontSize:'30px'}}>\n                Error! <br/>\n                Email might be already used <br/>\n                Each fiels cannot be null<br/>\n                <a\n                    href= \"http://localhost:3000/register\"\n                >\n                    Back to Register\n                </a>\n            </p>\n        );\n    }\n\n    \n\n    return(\n        <div>\n        {userEmail ? (\n            <div>\n                <p>Register successful</p>\n                <p style={{fontSize:'30px'}}>\n\n                    <a\n                        href=\"http://localhost:3000/login\"\n                    >\n                        Login now\n                    </a>\n                </p>\n            </div>\n        ) : (\n            <div id=\"register-box\">\n                <form>\n\n                    <h1 class=\"registerHere\">Register Here</h1>\n\n                    <div className=\"form-group text-left\">\n                        <label>First Name</label>\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"firstname\" \n                            placeholder=\"First Name\"\n                            value={state.firstname}\n                            onChange={handleChange} \n                        />\n                    </div>\n\n                    <div className=\"form-group text-left\">\n                        <label>Last Name</label>\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"lastname\" \n                            placeholder=\"Last Name\"\n                            value={state.lastname}\n                            onChange={handleChange} \n                        />\n                    </div>\n\n                    <div className=\"form-group text-left\">\n                        <label>Gender</label>\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"gender\" \n                            placeholder=\"Gender\"\n                            value={state.gender}\n                            onChange={handleChange} \n                        />\n                    </div>\n\n                    <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                        <input type=\"email\" \n                            className=\"form-control\" \n                            id=\"email\" \n                            aria-describedby=\"emailHelp\" \n                            placeholder=\"Email\" \n                            value={state.email}\n                            onChange={handleChange}\n                        />\n                    \n                    </div>\n                    <div className=\"form-group text-left\">\n                        <label htmlFor=\"exampleInputPassword1\">Password</label>\n                        <input type=\"password\" \n                            className=\"form-control\" \n                            id=\"password\" \n                            placeholder=\"Password\"\n                            value={state.password}\n                            onChange={handleChange} \n                        />\n                    </div>\n                    <div className=\"form-group text-left\">\n                        <label htmlFor=\"exampleInputPassword1\">Confirm Password</label>\n                        <input type=\"password\" \n                            className=\"form-control\" \n                            id=\"confirmPassword\" \n                            placeholder=\"Confirm Password\"\n                            value={state.confirmPassword}\n                            onChange={handleChange} \n                        />\n                    </div>\n                    <button \n                        type=\"submit\" \n                        className=\"register\"\n                        onClick={handleSubmitClick}\n                    >\n                        Register\n                    </button>\n                </form>\n\n                {/* <p> firstname : {state.firstname}</p>\n                <p> password : {state.password}</p> */}\n\n            </div>\n        )}\n        </div>\n        \n        \n    )\n}\n\nexport default RegistrationForm;\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Login/Login.js",["131","132","133"],"import React, { useState } from \"react\";\nimport { useAppContext } from \"../../libs/contextLib\";\nimport axios from 'axios'\nimport { Redirect } from \"react-router-dom\";\n\n\nimport \"./Login.css\";\n\nexport default function Login() {\n  const { userHasAuthenticated } = useAppContext();\n\n  const [state , setState] = useState({\n    \n    email : \"\",\n    password : \"\"\n  })\n  const [userEmail , setUserEmail] = useState(\"\");\n  const [loginError, setLoginError] = useState(null);\n\n\n  // console.log(\"email: \" + userEmail);\n  // console.log(\"error: \" + loginError);\n\n\n\n\n  const handleChange = (e) => {\n    const {id , value} = e.target   \n    setState(prevState => ({\n        ...prevState,\n        [id] : value\n    }))\n  }\n\n  const handleSubmitClick = (e) => {\n    e.preventDefault();\n    try {\n        \n        if (state.email == \"\") {\n            alert(\"email cannot be null\");\n        }\n        else if (state.password == \"\") {\n            alert(\"password cannot be null\");\n        }\n        else{\n          const user = {\n            email: state.email,\n            password: state.password\n          };\n          try {              \n            axios.post('http://localhost:5000/users/login', user)\n            .then(response => setUserEmail(response.data.email))\n            .catch(error => {\n                setLoginError(error.message);\n            })\n          } catch (error){\n            console.log(error);\n          }\n        }\n      \n          \n    }\n    catch(e) {\n        console.log(\"error: \" + e);\n    }\n  }\n\n  if (userEmail) {\n    userHasAuthenticated(true);\n    window.sessionStorage.setItem(\"userEmail\", userEmail);\n    // localStorage.setItem('test', 1);\n\n  }\n  // const s = window.sessionStorage.getItem(\"userEmail\")\n  // console.log(\"session : \" + s);\n\n  if (loginError) {\n\n    return(\n      <p style={{fontSize:'30px'}}>\n          Error! <br/>\n          Email or password is wrong <br/>\n          <a\n              href= \"http://localhost:3000/login\"\n          >\n              Back to Login\n          </a>\n      </p>\n  );\n\n  }\n  return (\n    <div>\n      {userEmail ? (\n        <div>\n            {/* <Redirect to=\"/\" /> */}\n            <p style={{fontSize:'30px'}}>\n              Have fun! {window.sessionStorage.getItem(\"userEmail\")}<br/>\n              \n              <a\n                  href= \"http://localhost:3000/\"\n              >\n                  Back to categories\n              </a>\n            </p>\n        </div>\n      ) : (\n            <div class=\"loginbox\">\n            <form>\n              <h1 class=\"loginHere\">Login Here</h1>\n\n\n              <div className=\"form-group text-left\">\n              <label htmlFor=\"exampleInputEmail1\">Email</label>\n              <input type=\"email\" \n                    className=\"form-control\" \n                    id=\"email\" \n                    aria-describedby=\"emailHelp\" \n                    placeholder=\"Email\" \n                    value={state.email}\n                    onChange={handleChange}\n              />\n              \n              </div>\n              <div className=\"form-group text-left\">\n                  <label htmlFor=\"exampleInputPassword1\">Password</label>\n                  <input type=\"password\" \n                      className=\"form-control\" \n                      id=\"password\" \n                      placeholder=\"Password\"\n                      value={state.password}\n                      onChange={handleChange} \n                  />\n              </div>\n              \n              <button\n                  class=\"login\" \n                  type=\"submit\" \n                  className=\"login\"\n                  onClick={handleSubmitClick}\n              >\n                  Login\n              </button>\n            </form>\n\n            <a href=\"http://localhost:3000/register\">Haven't created an account yet?</a>\n\n\n          {/* <p> email : {state.email}</p>\n          <p> password : {state.password}</p> */}\n\n        </div>\n      )}\n    </div>\n  );\n}","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongList.js",["134","135","136"],"import React, { useState, useEffect } from \"react\";\nimport {  withRouter } from 'react-router-dom';\nimport Song from './Song';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { makeStyles } from '@material-ui/core';\nimport Information from './Infotmation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport playAction from '../actions/playAction'\nconst useStyles = makeStyles({\n\tcard: {\n\t\tmaxWidth: 250,\n\t\theight: 'auto',\n\t\tmarginLeft: 'auto',\n\t\tmarginRight: 'auto',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n    },\n    play_control_header:{\n        width:'200px',\n    },\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tsong_li: {\n        listStyleType: 'none',\n        borderBottom: '1px solid #666',\n        display: 'flex',\n        lineHeight: 'normal',\n        fontSize: '14px',\n        cursor: 'pointer',\n        '&:hover':{\n            color: '#1db954',\n            background: '#bbbebc'\n        }\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title: {\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album:{\n        width: '250px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist:{\n        width: '200px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length:{\n        width: '60px',\n    },\n    song_icon:{\n        width: '60px',\n        textAlign:'center',\n        position: 'relative',\n        top: '10px'\n    },\n    song_length_header: {\n        width: '100px'\n    },\n    song_added:{\n        width: '150px'\n    },\n    song_added_header: {\n        width: '200px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px',\n        marginLeft:'30px',\n        marginRight:'30px',\n        background:'#ccffcc',\n\n    },\n\tpages: {\n\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    link: {\n        textDecoration: 'none',\n        color: 'black',\n        '&:hover':{\n            textDecoration: 'underline'\n        }\n    },\n    linkhover :{\n        textDecoration: 'underline'\n    }\n\n});\nconst SongList = (props)=>{\n    const classes = useStyles();\n    const dispatch =  useDispatch();\n    const [ page, setPage ] = useState(1);\n    const [ song, setSong ] = useState(undefined);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [ total, setTotal] = useState(undefined);\n    const [ description, setDescription] = useState(undefined);\n    const [ image, setImage] = useState(undefined);\n    const [ follow, setFollow] = useState(undefined);\n    const [ name, setName] = useState(undefined);\n    const [ owner, setOwner] = useState(undefined);\n    const [ date, setDate] = useState(undefined);\n    const [ artists, setArtists] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n\n    async function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                        setLoading(false);\n                    }else{\n                        if(type === 'playlists'){\n                            //console.log(body)\n                            setDescription(body.description||body.label);\n                            setImage(body.images[0].url);\n                            setFollow(body.followers?body.followers.total:body.popularity);\n                            setName(body.name);\n                            setOwner(body.owner?body.owner.display_name:'author');\n                            setArtists(body.artists);\n                            setDate(body.release_date);\n                        }\n                        if(type === 'song'){\n                            setTotal(Math.ceil(body.total / 10));\n                            setSong(body.items);\n                            dispatch(playAction.updateSongList(body.items, props.match.params.type));\n\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n    useEffect(()=>{\n        async function fetchData(){\n            try{\n                await getData(`https://api.spotify.com/v1/${props.match.params.type}/${props.match.params.id}`, 'playlists')\n            }catch(e){\n                console.log(e);\n            }\n        }\n        fetchData();\n    },[props.match.params.id,props.match.params.type])\n\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n                await getData(`https://api.spotify.com/v1/${props.match.params.type}/${props.match.params.id}/tracks?limit=10&&offset=${page*10-10}`,'song');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page, props.match.params.id,total,props.match.params.type]);\n    const changePageHandle = (event, page) => {\n\t\tsetPage(page);\n\t\tif (page === 1) {\n\t\t\tsetFirst(true);\n\t\t} else {\n\t\t\tsetFirst(false);\n\t\t};\n\t\tif (page === total) {\n\t\t\tsetLast(true);\n\t\t} else {\n\t\t\tsetLast(false);\n\t\t}\n    }\n\n    const buildList = (song, index)=>{\n        //console.log(\"chuan\",song);\n        let NewSong  = null;\n        if(!song.track){\n            NewSong = {track:song};\n        }else{\n            NewSong =  song;\n        }\n        return (\n            <Song song={NewSong} key={song.id?song.id:song.track.id} index={index}></Song>\n        )\n    }\n    let related_album = [];\n    let card = song && song.map((song, index) => {\n\n        if(song.track){\n            related_album.push(song.track.album.images[1]);\n        }\n        return buildList(song, index);\n    });\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n        return(\n\n        <div>\n            <div>\n                <Information artists={artists} date={date} name={name} image={image}  id='' popularity=''  follower={follow} description={description} owner={owner} related_album={related_album}></Information>\n            </div>\n            <div className={classes.song_header_container}>\n            <div className={classes.play_control_header}>\n\n            </div>\n            <div className={classes.song_title_header}>\n                <p>Title</p>\n            </div>\n            <div className={classes.song_artist_header}>\n                <p>Artist</p>\n            </div>\n            <div className={classes.song_album_header}>\n                <p>Album</p>\n            </div>\n            <div className={classes.song_added_header}>\n                <p>Date</p>\n            </div>\n            <div className={classes.song_length_header}>\n            <p>Duration</p>\n            </div>\n            </div>\n            {card}\n            {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n            </div>}\n            </div>\n        );\n    }\n\n\n\n}\nexport default withRouter(SongList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Home.js",["137"],"import React from 'react';\nimport '../App.css';\n\nconst Home = () => {\n    const url = 'https://accounts.spotify.com/authorize?show_dialog=true&client_id=230be2f46909426b8b80cac36446b52a&scope=playlist-read-private%20playlist-read-collaborative%20playlist-modify-public%20user-read-recently-played%20playlist-modify-private%20ugc-image-upload%20user-follow-modify%20user-follow-read%20user-library-read%20user-library-modify%20user-read-private%20user-read-email%20user-top-read%20user-read-playback-state&response_type=token&redirect_uri=http://localhost:3000/callback';\n    const localUrl = 'http://localhost:3000/login';\n    \n    return (\n\t\t<div>\n\n            <p class = \"login\" style={{fontSize:'30px'}}>\n\n                <a\n                    href= {url}\n                >\n                    Open Spotify Online\n                </a>\n\n                \n\t\t\t</p>\n            \n            {/* <p class = \"login\" style={{fontSize:'30px'}}> \n                <a\n                    href= {localUrl}\n                >\n                    Login locally\n                </a>\n            </p> */}\n\n            \n\t\t</div>\n      \n    )\n};\n\nexport default Home;\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/GenresList.js",["138"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar,Tab } from '@material-ui/core';\nimport '../App.css';\nconst useStyles = makeStyles({\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n        marginBottom:'30px',\n    },\n\tcard: {\n\t\tmaxWidth: 200,\n\t\theight: 'auto',\n\t\tmarginLeft: '30px',\n\t\tmarginRight: '30px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst GenresList = (props) =>{\n    const classes = useStyles();\n    const [ genresList, setGenresList ] = useState(undefined);\n    const [page, setPage] = useState(1);\n    const [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [total, setTotal] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n    let card = null;\n\n    async function getData(url){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    }else{\n                    setTotal(Math.ceil(body.categories.total / 24));\n                    setGenresList(body.categories.items);\n                    setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n\n    useEffect(()=> {\n        async function fetchData () {\n            try{\n\n                await getData(`https://api.spotify.com/v1/browse/categories?limit=24&&offset=${page*24-24}`);\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page]);\n\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n\n\n        const buildCard = (genre)  => {\n            return(\n                <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={genre.id}>\n                    <Card className={classes.card} variant='outlined'>\n                    <CardActionArea>\n                        <Link to={`/${genre.id}/playList`}>\n                        <div className='category-image'>\n                            <img alt=\"category\" src={genre.icons ? genre.icons[0].url : genre.images[0].url} width='100%'/>\n\n                             <p className='category-name'>{genre.name}</p>\n\n                        </div>\n                        </Link>\n                    </CardActionArea>\n                    </Card>\n                </Grid>\n            );\n        };\n        card = genresList && genresList.map((genre) => {\n            return buildCard(genre);\n        });\n        if(loading){\n            return (\n                <div>\n                    <h2>Loading....</h2>\n                </div>\n            );\n        }else if(error){\n            return (\n                <div>\n                    <h2>Error....</h2>\n                </div>\n            );\n        }else {\n            return (\n                <div>\n                    <AppBar position=\"static\" className={classes.appbar}>\n                    <Tab  label=\"All Categories\" />\n                    </AppBar>\n                    <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                    </Grid>\n                    {total === 1?<div className={classes.pages}>No More</div>:\n                    <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                    </div>}\n\n                </div>\n            );\n        }\n\n};\n\nexport default withRouter(GenresList);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/AlbumList.js",["139","140"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles,  Box, Tabs, Tab, AppBar } from '@material-ui/core';\nimport '../App.css';\nimport Song from './Song';\nimport Information from './Infotmation';\nimport { useSelector, useDispatch } from 'react-redux';\nimport playAction from '../actions/playAction'\nconst useStyles = makeStyles({\n    card: {\n\t\tmaxWidth: 300,\n\t\theight: 'auto',\n\t\tmarginLeft: '20px',\n\t\tmarginRight: '20px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length_header: {\n        width: '60px'\n    },\n    song_added_header: {\n        width: '150px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px'\n    },\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n    },\n    empty:{\n        width: '250px',\n    }\n});\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={2}>\n            <div>{children}</div>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nconst AlbumList = (props) => {\n    const [value, setValue] = React.useState(0);\n    //const regex = /(<([^>]+)>)/gi;\n    const classes = useStyles();\n    const [ albumList, setAlbumList ]  = useState(undefined);\n    const [page, setPage] = useState(1);\n\tconst [isLast, setLast] = useState(false);\n    const [isFirst, setFirst] = useState(true);\n    const [ top, setTop] = useState(undefined);\n\tconst [singerName, setSingerName] = useState('');\n    const [singerPhoto, setSingerPhoto] = useState('');\n    const [singerPop, setSingerPop] = useState(0);\n    const [singerF, setSingerF] = useState(0);\n    const [genre, setGenre] = useState(undefined);\n    const [total, setTotal] = useState(undefined);\n    const [id, setId] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n    const [error, setError]  =  useState(false);\n    const dispatch = useDispatch();\n\n\tlet card = null;\n\n\tasync function getData(url, type){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    } else {\n                        if(type === 'artist'){\n                            setSingerName(body.name);\n                            setId(body.id);\n                            setSingerPhoto(body.images[1].url);\n                            setGenre(body.genres);\n                            setSingerPop(body.popularity);\n                            setSingerF(body.followers.total);\n                        }\n                        if(type === 'album'){\n                            setAlbumList(body.items);\n                            setTotal(Math.ceil(body.total / 24));\n                        }\n                        if(type === 'topSong'){\n                            setTop(body.tracks);\n                            dispatch(playAction.updateSongList(body.tracks, 'albums'));\n\n                        }\n                        setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    useEffect(() => {\n        async function fetchData(){\n            try{\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}/albums?limit=24&&offset=${page*24-24}`,'album');\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}`, 'artist');\n                await getData(`https://api.spotify.com/v1/artists/${props.match.params.id}/top-tracks?country=SE`,'topSong');\n                if (page === 1) {\n\t\t\t\t\tsetFirst(true);\n\t\t\t\t\tsetLast(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetFirst(false);\n                }\n                if (page === total) {\n\t\t\t\t\tsetLast(true);\n\t\t\t\t\tsetFirst(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetLast(false);\n                }\n            } catch (e) {\n                console.log(e);\n                setError(true);\n            }\n        }\n\n        fetchData();\n    }, [page,props.match.params.id]);\n\n    const changePageHandle = (event, page) => {\n        setPage(page);\n        if (page === 1) {\n            setFirst(true);\n        } else {\n            setFirst(false);\n        };\n        if (page === total) {\n            setLast(true);\n        } else {\n            setLast(false);\n        }\n    }\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n      };\n    const buildList = (albm) => {\n\t\treturn (\n\t\t<Grid item xs={6} sm={4} md={3} lg={2} xl={2}  key={albm.id}>\n\t\t\t<Card className={classes.card} variant='outlined'>\n\t\t\t<CardActionArea>\n\t\t\t\t<Link to={`/albums/songsList/${albm.id}`}>\n\t\t\t\t<div className='category-image'>\n\t\t\t\t\t<img alt=\"category\" src={albm.icons ? albm.icons[0].url : albm.images[1].url} width='100%'/>\n\n\t\t\t\t\t <p className='category-name'>{albm.name}</p>\n\n\t\t\t\t</div>\n\t\t\t\t</Link>\n\t\t\t</CardActionArea>\n\t\t\t</Card>\n\t\t</Grid>\n\t\t);\n    };\n\n\tcard = albumList && albumList.map((album) => {\n        return buildList(album);\n    });\n    let topList = top && top.map((song) => {\n        let NewSong = {\n            track: song\n        }\n        return (\n            <Song song={NewSong} key={song.id}></Song>\n        )\n    });\n\n    if(loading){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Loading....</h2>\n\t\t\t</div>\n\t\t);\n    }else if(error){\n        return (\n\t\t\t<div>\n\t\t\t\t<h2>Error....</h2>\n\t\t\t</div>\n\t\t);\n    }else {\n\t\treturn (\n          <div>\n            <Information name={singerName} image={singerPhoto} genre={genre} id={id} follower={singerF} popularity={singerPop}></Information>\n            <AppBar position=\"static\" className={classes.appbar}>\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" centered variant=\"fullWidth\">\n                    <Tab  label=\"All Albums\" {...a11yProps(0)} />\n                    <Tab  label=\"Top Songs\" {...a11yProps(1)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n            <div>\n\n                <Grid container className={classes.grid} spacing={2}>\n                        {card}\n                </Grid>\n                {total === 1?<div className={classes.pages}>No More</div>:\n                <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                </div>}\n            </div>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n            <div className={classes.song_header_container}>\n                <div className={classes.empty}></div>\n                <div className={classes.song_title_header}>\n                    <p>Title</p>\n                </div>\n                <div className={classes.song_artist_header}>\n                    <p>Artist</p>\n                </div>\n                <div className={classes.song_album_header}>\n                    <p>Album</p>\n                </div>\n                <div className={classes.song_added_header}>\n                    <p>Date</p>\n                </div>\n                <div className={classes.song_length_header}>\n                <p>Duration</p>\n                </div>\n\n            </div>\n            {topList}\n            </TabPanel>\n            <div className={classes.pages}>No More</div>\n          </div>\n        );\n    }\n}\n\n\n\n\nexport default withRouter(AlbumList);\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/SongPlay.js",["141","142","143","144","145","146","147"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport playAction from '../actions/playAction'\nimport {  withRouter } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core';\nimport FastForwardIcon from '@material-ui/icons/FastForward';\nimport FastRewindIcon from '@material-ui/icons/FastRewind';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { deprecationHandler } from \"moment\";\n\nconst useStyles = makeStyles({\n    song_details :{\n        position: 'absolute',\n        left: '20px',\n        lineHeight: '22px',\n    },\n    song_name: {\n        fontFamily:'\"Proxima Nova\" Georgia sans-serif',\n        color: '#fff',\n        fontSize: '14px'\n    },\n    artist_name: {\n        fontFamily: '\"Proxima Nova\" Georgia sans-serif',\n        color: '#aaa',\n        fontSize: '12px'\n      },\n\n    progress_container:{\n        position: 'relative',\n        top: '-7px',\n        fontSize: '40px',\n        margin: '0 5px',\n        marginTop: '10px',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    progress : {\n        width: '500px',\n        height: '4px',\n        background: 'rgb(64, 64, 64)',\n        borderRadius: '4px'\n      },\n    footer :{\n        position: 'fixed',\n        width: '100%',\n        bottom: 0,\n        left: 0,\n        background: '#006600',\n        height: '80px',\n        zIndex: 2,\n    },\n    song_controls:{\n        justifyContent: 'center',\n        display: 'flex',\n        marginTop: '20px',\n    },\n    play_btn :{\n        padding: \"0 5px\",\n        color: 'rgb(179, 179, 179)',\n        cursor: 'pointer',\n    },\n    last_song:{\n        padding: \"0 5px\",\n        color: 'rgb(179, 179, 179)',\n        cursor: 'pointer',\n    },\n    next_song:{\n        padding: \"0 5px\",\n        color: 'rgb(179, 179, 179)',\n        cursor: 'pointer',\n    }\n\n});\n\nconst SongPlay = (props)=>{\n    const dispatch = useDispatch();\n    const  classes =  useStyles();\n    const [audio, setAudio] = useState(undefined);\n    const allState = useSelector((state) => state);\n    const songsPlay = allState.songsPlay;\n    const song = allState.songsPlay.song;\n    console.log(song);\n    const songList = allState.songsPlay.songList;\n    const track = allState.songsPlay.track;\n    const [open, setOpen] = useState(undefined);\n\n    let songTrackList = [];\n\n        if(track==='albums'){\n            songList.map((everySong)=>{\n                let song = {\n                    track: everySong\n                }\n                songTrackList.push(song);\n\n\n            });\n        }else{\n            songTrackList =  songList;\n        }\n\n\n    const stopSong = () => {\n        if (audio) {\n\n        audio.pause();\n        }\n    };\n\n    const pauseSong = () => {\n        if (audio) {\n        //this.props.pauseSong();\n        audio.pause();\n        }\n    };\n\n    const resumeSong = () => {\n        if (audio) {\n        //this.props.resumeSong();\n        audio.play();\n\n        }\n    };\n\n\n    const audioControl = (song, index) => {\n        let  audioplay=null;\n\n        if (audio === undefined) {\n            if(song.track.preview_url){\n                audioplay = new Audio(song.track.preview_url);\n\n                console.log(audioplay);\n                setAudio(audioplay);\n                dispatch(playAction.playSong(song, index));\n                audioplay.play();\n            }else{\n                handleOpen();\n                console.log(\"1\");\n            }\n        } else {\n            stopSong();\n            //audioplay.pause();\n            dispatch(playAction.stopSong());\n            if(song.track.preview_url){\n                dispatch(playAction.playSong(song, index));\n                const audioplay = new Audio(song.track.preview_url);\n                console.log(audioplay);\n                setAudio(audioplay);\n                audioplay.play();\n            }else{\n                handleOpen();\n                console.log(\"le\");\n            }\n        }\n    };\n    function handleOpen () {\n        setOpen(true);\n    };\n    function handleClose ()  {\n        setOpen(false);\n      };\n\n    const getSongIndex = () => {\n        let songIndex = null;\n        songTrackList.map((everySong, index) => {\n          if (everySong.track.id === song.track.id) {\n              songIndex = index;\n            return songIndex;\n          }\n        });\n        if(songIndex){\n            return songIndex;\n        }else{\n            return 0;\n        }\n      }\n    const last =()=>{\n        if(songTrackList.length!== 0){\n            let SongIndex;\n            if(song){\n                SongIndex = getSongIndex();\n            }else{\n                SongIndex = 0;\n            }\n            setProgress(0);\n            SongIndex === 0 ? audioControl(songTrackList[songTrackList.length - 1]) : audioControl(songTrackList[SongIndex - 1]);\n        }else{\n            handleOpen();\n        }\n    }\n    const next =()=>{\n        if(songTrackList.length!== 0){\n            let SongIndex;\n            console.log(songTrackList);\n            if(song){\n                SongIndex = getSongIndex();\n            }else{\n                SongIndex = songTrackList.length - 1\n            }\n            setProgress(0);\n            SongIndex === songTrackList.length - 1 ? audioControl(songTrackList[0]) : audioControl(songTrackList[SongIndex + 1]);\n        }else{\n            handleOpen();\n        }\n    }\n\n    const handleChange = (song)=>{\n        if(song){\n            if(songsPlay.globalPlay){\n                dispatch(playAction.pauseSong());\n                console.log(\"ee\");\n                pauseSong();\n            }else{\n                if(song){\n                    // dispatch(playAction.resumeSong());\n                    // resumeSong();\n                    audioControl(song);\n                }else{\n                    audioControl(songTrackList[0])\n                }\n            }\n        }else{\n            handleOpen();\n        }\n    }\n    const MAX  = 30;\n    const MIN  =  0;\n    const normalise = value => (value - MIN) * 100 / (MAX - MIN);\n\n    const [progress, setProgress] = React.useState(0);\n\n    useEffect(() => {\n        if(songsPlay.globalPlay){\n            setProgress(0);\n            const timer = setInterval(() => {\n            var time =  0;\n            setProgress((oldProgress) => {\n                if (oldProgress === 30) {\n                    dispatch(playAction.pauseSong());\n                    clearInterval(timer);\n                return 0;\n\n                }\n                const diff = 1;\n                time += oldProgress\n                return Math.min(oldProgress + diff, 30);\n            });\n\n            }, 1000);\n\n\n        return () => {\n        clearInterval(timer);\n        };\n      }\n    }, [song, songsPlay.globalPlay]);\n    useEffect(() => {\n        if(songsPlay.playing === songsPlay.globalPlay){\n            if(songsPlay.globalPlay){\n                audioControl(song);\n            }else{\n                pauseSong();\n            }\n        }else{\n            audioControl(song);\n            console.log('d');\n        }\n    }, [songsPlay.globalPlay, song]);\n\n    return(\n          <div className={classes.footer}>\n                <div className={classes.song_details}>\n                    <p className={classes.song_name}>{song?song.track.name:''}</p>\n                    <p className={classes.artist_name}>{song?song.track.artists[0].name:''}</p>\n               </div>\n               <div className={classes.song_controls}>\n\n                    <div onClick={()=>last()} className={classes.last_song}>\n                     <FastRewindIcon></FastRewindIcon>\n                    </div>\n\n                    <div className={classes.play_btn} onClick={()=>handleChange(song)}>\n                    {/* <i onClick={\"!this.props.songPaused ? this.props.pauseSong : this.props.resumeSong\"} className={\"showPlay\"} aria-hidden=\"true\" /> */}\n                    {songsPlay.globalPlay? <PauseIcon/>:<PlayArrowIcon></PlayArrowIcon>\n                    }\n                    </div>\n\n                    <div onClick={()=>next()} className={classes.next_song}>\n                     <FastForwardIcon></FastForwardIcon>\n                    </div>\n\n                </div>\n                <div className= {classes.progress_container}>\n                    <div className={classes.progress}>\n                       <LinearProgress variant=\"determinate\" value={normalise(progress)} />\n                    </div>\n                </div>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Not Available\"\n                />\n\n          </div>\n      )\n\n}\n\nexport default withRouter(SongPlay);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/libs/contextLib.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/rootReducer.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Infotmation.js",["148","149","150","151","152","153","154"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport download from '../img/download.jpeg'\n\nimport {Chip, Avatar, Link} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: '#ccffcc',\n    display: 'flex',\n    height: 400,\n    margin: '30px',\n  },\n  details: {\n    marginTop:'20px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '0.7 0 auto',\n    padding:0\n  },\n  cover: {\n    margin:'20px',\n    width: 400,\n\n  },\n  name: {\n    textAlign: 'left',\n\n    letterSpacing: '1px',\n    marginLeft: '200px',\n    fontWeight: 500,\n    fontSize: '40px'\n  },\n  tag:{\n    display: 'flex',\n    textAlign: 'left',\n    fontWeight: 500,\n    lineHeight: 4,\n    marginLeft: '200px'\n  },\n  chip:{\n    marginLeft:'7px',\n    background: '#666600'\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n  detail: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  related:{\n    textAlign: 'left',\n      display:'flex',\n      marginLeft:'200px',\n      fontWeight: 500,\n      lineHeight:2.75,\n  },\n  related_icon:{\n    textAlign: 'left',\n      display:'flex',\n  },\n  icon:{\n      marginLeft:'5px'\n  },\n  span_label:{\n      marginRight:'20px'\n  }\n}));\n\nexport default function Information(props) {\n  const classes = useStyles();\n  const {name, image, genre,id,popularity,follower,description, owner, related_album, date, artists} = props;\n  const [related, setRelated] = useState(undefined);\n\n\n  async function getData(url, type){\n    var request = require('request');\n    var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n    var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n    var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n        },\n        form: {\n          grant_type: 'client_credentials'\n        },\n        json: true\n    };\n    request.post(authOptions,function(error, response,body){\n        if (!error && response.statusCode === 200) {\n                var token = body.access_token;\n                var options = {\n                    url: url,\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    },\n                    json: true\n                };\n                request.get(options, function(error, response, body) {\n                    setRelated(body.artists);\n                });\n        }\n    });\n}\n\nconst handleJump=(id)=>{\n    if(id){\n        window.location.href=`/albumList/${id}`;\n    }\n}\n\nuseEffect(() => {\n    async function fetchData(){\n        try{\n            if(id){\n            await getData(`https://api.spotify.com/v1/artists/${id}/related-artists`,'related');\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    fetchData();\n},[props.id])\n\n  let genres = genre && genre.map((genre, index)=>{\n    return (\n        <Chip color=\"primary\" size=\"small\" label={genre} className={classes.chip} key={index}/>\n    )\n  });\n    let imageIcon = related && related.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon} key={index}>\n                    <Avatar alt=\"Remy Sharp\" src={e.images[1].url} className={classes.large}  onClick={()=>handleJump(e.id)}/>\n                </div>\n                )\n        }\n    });\n    let imageAlbum = related_album && related_album.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon} key={index}>\n                    <Avatar alt=\"Remy Sharp\" src={e.url} className={classes.large} />\n                </div>\n                )\n        }\n    });\n    let imageArtist = artists && artists.map((e, index)=>{\n        if(index<=5){\n            return(\n                <div className={classes.icon}key={index}>\n                    <Avatar alt=\"Remy Sharp\"  className={classes.large}  onClick={()=>handleJump(e.id)}>{e.name}</Avatar>\n                </div>\n                )\n        }\n    });\n\n  return (\n    <Card className={classes.root}>\n        <CardMedia\n        className={classes.cover}\n        image={image?image:download}\n        title=\"photo\"\n        />\n        <div className={classes.details}>\n            <CardContent className={classes.content}>\n                <div component=\"h5\" variant=\"h5\" className={classes.name}>\n                    {name}\n                </div>\n                <div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>{genre?'Styles:':'Description:'}</span>\n                    {genre?<div>\n                        {genres}\n                        </div>:<div>\n                        {description}\n\n                    </div>\n                    }\n\n                </div>\n                {popularity?<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Popularity:</span>\n                    <div >\n                    {popularity}\n                    </div>\n                </div>:owner=='author'?<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Release Date:</span>\n                    <div >\n                    {date}\n                    </div>\n                </div>:<div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Owner:</span>\n                    <div >\n                    {owner}\n                    </div>\n                </div>\n                }\n                <div variant=\"subtitle1\" color=\"textSecondary\" className={classes.tag} >\n                    <span className={classes.span_label}>Followers:</span>\n                    <div >\n                    {follower}\n                    </div>\n                </div>\n\n            </CardContent>\n            {id?<div className={classes.related}>\n                <span className={classes.span_label}>Related Artists:</span>\n                <div className={classes.related_icon}>\n                   {imageIcon}\n                </div>\n            </div>: !artists?<div className={classes.related}>\n                <span className={classes.span_label}>Related Albums:</span>\n                <div className={classes.related_icon}>\n                   {imageAlbum}\n                </div>\n            </div>:<div className={classes.related}>\n                <span className={classes.span_label}>Related Artists:</span>\n                <div className={classes.related_icon}>\n                   {imageArtist}\n                </div>\n            </div>}\n        </div>\n    </Card>\n  );\n}\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Song.js",["155","156"],"import React, { useState, useEffect } from \"react\";\nimport { Link, withRouter } from 'react-router-dom';\nimport LibraryAddOutlined from '@material-ui/icons/LibraryAddOutlined';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\nimport moment from \"moment\";\nimport { makeStyles } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport playAction from '../actions/playAction'\nimport addSong from '../actions/addSong'\n\nconst useStyles = makeStyles({\n\tsong_li: {\n        listStyleType: 'none',\n        borderBottom: '1px solid #666',\n        display: 'flex',\n        lineHeight: 'normal',\n        fontSize: '14px',\n        cursor: 'pointer',\n        marginLeft:'30px',\n        marginRight:'30px',\n        '&:hover':{\n            color: '#000000',\n            background: '#f2ffe5'\n        }\n    },\n    song_title_header:{\n        width: '300px'\n    },\n    song_title: {\n        width: '300px'\n    },\n    song_title_header1: {\n        width: '300px'\n    },\n    song_album:{\n        width: '250px'\n    },\n    song_album_header: {\n        width: '250px'\n    },\n    song_artist:{\n        width: '200px'\n    },\n    song_artist_header: {\n        width: '200px'\n    },\n    song_length:{\n        width: '100px',\n    },\n    song_icon:{\n        width: '100px',\n        textAlign:'left',\n        position: 'relative',\n        top: '10px',\n        '&:hover':{\n            color: '#8c8c8c',\n        }\n    },\n    song_length_header: {\n        width: '100px'\n    },\n    song_added:{\n        width: '200px'\n    },\n    song_added_header: {\n        width: '150px'\n    },\n    song_header_container: {\n        display: 'flex',\n        borderBottom: '1px solid #666',\n        paddingBottom: '6px',\n        marginTop: '20px'\n    },\n    play_control:{\n        width:'100px',\n        textAlign:'center',\n        position: 'relative',\n        top: '10px',\n        '&:hover':{\n            color: '#8c8c8c',\n        }\n\n    },\n    link: {\n        textDecoration: 'none',\n        color: 'black',\n        '&:hover':{\n            textDecoration: 'underline'\n        }\n    },\n    linkhover :{\n        textDecoration: 'underline'\n    }\n\n});\nconst Song = (props)=>{\n    const classes = useStyles();\n    const [ play, setPlay] = useState(false);\n    const [ pause, setPause] = useState(true);\n    const allState = useSelector((state) => state);\n    const songsPlay = allState.songsPlay;\n    const songR = allState.songsPlay.song;\n    const dispatch = useDispatch();\n    const {song, index}=props;\n    const track = song.track;\n    function timeFormat(time){\n        const min = Math.floor(time/60000);\n        const sec = ((time % 60000) / 1000).toFixed(0);\n        return min+\":\"+(sec < 10 ? \"0\" : \"\")+sec;\n    }\n\n    // if(songsPlay.globalPlay&&song.track.id===songR.track.id){\n    //     setPlay(true);\n    // }else{\n    //     setPlay(false);\n    // }\n    useEffect(()=>{\n        if(songsPlay.globalPlay&&song.track.id===songR.track.id){\n            setPlay(true);\n        }else{\n            setPlay(false);\n        }\n    },[songR,songsPlay.globalPlay])\n\n\n\n    const handleChange=(song)=>{\n        if(play){\n            dispatch(playAction.pauseSong());\n            setPause(true);\n            setPlay(false);\n            //pauseSong();\n\n        }else{\n            if(song.track.preview_url){\n                console.log(song);\n                dispatch(playAction.playSong(song,index));\n                setPause(false);\n                setPlay(true);\n                //audioControl(song);\n            }else{\n                dispatch(playAction.toSong(song));\n            }\n        }\n    }\n    async function handleAdd(song){\n        if(window.sessionStorage.userEmail){\n            console.log(window.sessionStorage.userEmail);\n            const favoriteSong = {\n                artist: song.track.artists[0].name,\n                albumName: song.track.album?song.track.album.name : '-',\n                artistId:song.track.artists[0].id,\n                albumId:song.track.album?song.track.album.id : '-',\n                title:song.track.name,\n                playUrl:song.track.preview_url,\n                songId:song.track.id,\n            }\n            await addSong(favoriteSong);\n        }\n\n    }\n    return (\n        <li className={classes.song_li} >\n            <div  className={classes.play_control} onClick={()=>handleChange(song, index)}>\n                {play&&songsPlay.globalPlay&&song.track.id===songR.track.id?<PauseCircleOutlineIcon></PauseCircleOutlineIcon>\n                :\n                <PlayCircleOutlineIcon  ></PlayCircleOutlineIcon>\n                }\n            </div>\n            <div className={classes.song_icon} onClick={()=>handleAdd(song)}>\n                <i>\n                <LibraryAddOutlined></LibraryAddOutlined>\n                </i>\n            </div>\n            <div className={classes.song_title}>\n                <p>{song.track? song.track.name : song.name}</p>\n            </div>\n\n            <Link to={track?`/albumList/${track.artists[0].id}`:`/albumList/${song.artists[0].id}`} className={classes.link}>\n            <div className={classes.song_artist}>\n                <p>{song.track?track.artists[0].name:song.artists[0].name}</p>\n            </div>\n            </Link>\n            {song.track.album?\n            <Link to={`/albums/songsList/${song.track.album.id}`} className={classes.link}>\n            <div className={classes.song_album}>\n                <p>{song.track?song.track.album.name:'-'}</p>\n            </div>\n            </Link>:\n            <div className={classes.song_album}>\n                <p>{song.album?song.album.name:song.name?song.name:'-'}</p>\n            </div>}\n\n            <div className={classes.song_added}>\n                <p>{song.track? moment(song.added_at).format(\"YYYY-MM-DD\") : song.album?song.album.release_date:'-'}</p>\n            </div>\n\n            <div className={classes.song_length}>\n                <p>{song.track?timeFormat(song.track.duration_ms):timeFormat(song.duration_ms)}</p>\n            </div>\n\n        </li>\n    )\n}\nexport default withRouter(Song);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js",["157"],"import { json } from \"body-parser\";\n\nconst initalState = {\n    playing: false,\n    playTime: 0,\n    song: '',\n    //Pause: true,\n    globalPlay: false,\n    songList:[],\n    currentIndex:0\n\n}\nlet copyState = null\nconst songPlayer = (state = initalState, action) => {\n    const {type, song, songList, currentIndex, track} = action;\n\n    switch(type) {\n        case \"PLAY_SONG\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.globalPlay = true;\n            copyState.song = song;\n            copyState.playing = true;\n            copyState.currentIndex  =  currentIndex;\n            console.log(copyState);\n            return copyState\n\n        case \"TO_SONG\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.globalPlay = false;\n            copyState.song = song;\n            copyState.playing = true;\n            copyState.currentIndex  =  currentIndex;\n            return copyState\n\n        case \"STOP_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = false;\n            copyState.playing = false;\n            return copyState;\n\n        case \"PAUSE_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = false;\n            copyState.playing = false;\n            return copyState;\n\n\n\n        case \"RESUME_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = true;\n            copyState.playing = true;\n            return copyState;\n\n        case \"UPDATE_SONG_LIST\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.songList = songList;\n            copyState.track = track;\n            return copyState\n\n        case \"UPDATE_INDEX\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.currentIndex  =  currentIndex;\n            return copyState\n\n        case \"INCREASE_SONG_TIME\":\n            return {\n                ...state,\n                timeElapsed: action.time\n            };\n        default:\n            return state;\n }\n};\nexport default songPlayer;","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/playAction.js",[],"/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Search.js",["158","159","160","161","162","163","164","165","166","167","168"],"import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { Card, CardActionArea,  Grid,  makeStyles, AppBar,Tab } from '@material-ui/core';\nimport Image from 'react-bootstrap/Image'\nimport noImage from '../img/download.jpeg';\nimport '../App.css';\nconst useStyles = makeStyles({\n    appbar: {\n        background:'#006600',\n        marginLeft:'30px',\n        marginRight:'30px',\n        width: 'auto',\n        marginBottom:'30px',\n    },\n\tcard: {\n\t\tmaxWidth: 200,\n\t\theight: 'auto',\n\t\tmarginLeft: '30px',\n\t\tmarginRight: '30px',\n\t\tborderRadius: 5,\n\t\tborder: '1px solid #1e8678',\n\t\tboxShadow: '0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);'\n\t},\n\ttitleHead: {\n\t\tborderBottom: '1px solid #1e8678',\n\t\tfontWeight: 'bold'\n\t},\n\tgrid: {\n\t\tflexGrow: 1,\n\t\tflexDirection: 'row'\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\twidth: '100%'\n\t},\n\tbutton: {\n\t\tcolor: '#1e8678',\n\t\tfontWeight: 'bold',\n\t\tfontSize: 12\n\t},\n\tbtnGroup: {\n\t\tmarginTop: '50px'\n\t},\n\tpages: {\n\t\ttextAlign: 'center',\n\t\tmargin: '100px',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nconst Search = (props) =>{\n    const classes = useStyles();\n    const [ albumList, setAlbumList ] = useState(undefined);\n    const [ artistsList, setArtistsList ] = useState(undefined);\n    const [ playList, setPlayList ] = useState(undefined);\n    const [ page, setPage ] = useState(1);\n    const [ isLast, setLast ] = useState(false);\n    const [ isFirst, setFirst ] = useState(true);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ]  =  useState(false);\n    const [ searchTerm, setSearchTerm ] = useState('');\n    let card = null;\n    let card2 = null;\n    let card3 = null;\n    async function getData(url){\n        var request = require('request');\n        var client_id = 'c9b1db19becd48f78d6913a3431ae24a'; // Your client id\n        var client_secret = '98145905039345c4a5df9542ca98cc55'; // Your secret\n        var authOptions = {\n            url: 'https://accounts.spotify.com/api/token',\n            headers: {\n              'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n            },\n            form: {\n              grant_type: 'client_credentials'\n            },\n            json: true\n        };\n        request.post(authOptions,function(error, response,body){\n            if (!error && response.statusCode === 200) {\n                    var token = body.access_token;\n                    var options = {\n                        url: url,\n                        headers: {\n                            'Authorization': 'Bearer ' + token\n                        },\n                        json: true\n                    };\n                    request.get(options, function(error, response, body) {\n                    if(error){\n                        setError(true);\n                    }else{\n                    setAlbumList(body.albums.items);\n                    setArtistsList(body.artists.items);\n                    setPlayList(body.playlists.items);\n                    setLoading(false);\n                    }\n                    });\n            }\n        });\n    }\n\n    const handleChange = (e) => {\n        setSearchTerm(e.target.value);\n        // setLoading(true);\n        console.log(e.target.value);\n        if(e.target.value){\n            getData(`https://api.spotify.com/v1/search?query=${e.target.value}&offset=0&limit=6&type=album%2Cartist%2Cplaylist`);\n        }\n    };    \n    const searchValue = async (value) => {\n\t\tsetSearchTerm(value);\n\t};\n    const buildCard = (genre)  => {\n        console.log(genre);\n        return(\n            <Grid item xs={12} sm={4} md={3} lg={2} xl={2}  key={genre.id}>\n                <Card className={classes.card} variant='outlined'>\n                <CardActionArea>\n                    <Link to={`/albumList/${genre.id}`}>\n                    <div className='category-image'>\n                        <img alt=\"category\" src={genre.images && genre.images.length === 0 ? noImage : genre.images[0].url} width='100%'/>\n                         <p className='category-name'>{genre.name}</p>\n                    </div>\n                    </Link>\n                </CardActionArea>\n                </Card>\n            </Grid>\n        );\n    };\n    card = artistsList && artistsList.map((artist) => {\n        return buildCard(artist);\n    });\n    card2 = albumList && albumList.map((artist) => {\n        return buildCard(artist);\n    });\n    card3 = playList && playList.map((artist) => {\n        return buildCard(artist);\n    });\n\n    if(loading){\n        return (\n            <div>\n                <h2>Loading....</h2>\n            </div>\n        );\n    }else if(error){\n        return (\n            <div>\n                <h2>Error....</h2>\n            </div>\n        );\n    }else {\n            return (\n                <div>\n                    <div className=\"form__group field\">\n                    <form\n                        className = \"searchform\"\n                        method='POST '\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                        }}\n                        name='formName'\n                       \n                    >\n                        <input className=\"form__field\" autoComplete='off' type='text' name='searchTerm' placeholder=\"Search\" onChange={handleChange} />\n                        <label for=\"name\" class=\"form__label\">Search</label>\n                    </form>\n                    </div>\n                     {(searchTerm) ? (<div>\n                        <AppBar position=\"static\" className={classes.appbar}>\n                        <Tab  label=\"Artists\" />\n                        </AppBar>\n                        <Grid container className={classes.grid} spacing={2}>\n                            {card}\n                        </Grid>\n                        <AppBar position=\"static\" className={classes.appbar}>\n                        <Tab  label=\"Albums\" />\n                        </AppBar>\n                        <Grid container className={classes.grid} spacing={2}>\n                            {card2}\n                        </Grid>\n                        <AppBar position=\"static\" className={classes.appbar}>\n                        <Tab  label=\"PlayList\" />\n                        </AppBar>\n                        <Grid container className={classes.grid} spacing={2}>\n                            {card3}\n                        </Grid>\n                    </div>):(\n                    <div>\n                        <h1 className =\"searchh1\">Search Artists, Albums or PlayList</h1>\n                    </div>\n                     )}\n                    {/* {total === 1?<div className={classes.pages}>No More</div>:\n                    <div className={classes.pages}>\n                        <Pagination count={total} page={page} defaultPage={page} onChange={changePageHandle} variant=\"outlined\" shape=\"rounded\" hidePrevButton={isFirst} hideNextButton={isLast} />\n                    </div>} */}\n                </div>\n            );\n    }\n\n\t// return (\n\t// \t<form\n\t// \t\tmethod='POST '\n\t// \t\tonSubmit={(e) => {\n\t// \t\t\te.preventDefault();\n\t// \t\t}}\n\t// \t\tname='formName'\n\t// \t\tclassName='center'\n\t// \t>\n\t// \t\t<label>\n\t// \t\t<input autoComplete='off' type='text' name='searchTerm' placeholder=\"Search\" onChange={handleChange} />\n\t// \t\t</label>\n\t// \t</form>\n\t// );\n\n};\n\nexport default Search;","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/LikedPage.js",["169","170","171","172","173"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport Pagination from '@material-ui/lab/Pagination'\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport addSong from \"../actions/addSong\";\nconst axios = require('axios').default;\n\nconst columns = [\n    { id: 'name', label: 'Name', align: 'center', minWidth: 100 },\n    { id: 'singer', label: 'Singer Name', align: 'center', minWidth: 100 },\n    {\n        id: 'albumName',\n        label: 'Album Name',\n        minWidth: 100,\n        align: 'center',\n    },\n    {\n        id: 'remove',\n        label: 'Remove',\n        minWidth: 100,\n        align: 'center',\n    }\n\n];\n\n// new part\n// try {\n//     let songObj = {\n//         title: \"song2\",\n//         artist: \"singer2\",\n//         artistId: \"singerID2\",\n//         albumName: \"albumName2\",\n//         albumId: \"albumId2\"\n//     }\n//     const addSongRes = addSong(songObj);\n//     console.log(addSongRes)\n// } catch(e) {\n//     console.log({error:e})\n// }\n\n// 拿到 了数据。写成这个格式get()==>obj\n// let Nsong = {\n//     track: {\n//         album:{\n//             id: obj.albumId,\n//             name: obj.albumName,\n//         },\n//         artists: [\n//             {\n//                 id:obj.artistId,\n//                 name: obj.artistName\n//             }\n//         ],\n//         name: obj.title,\n//         preview_url: obj.playUrl,\n//         id:obj.songId\n//     }\n// },\n// import playAction from '../actions/playAction'\n// import {useDispatch} from 'react-redux';\n// const dispatch = useDispatch();\n// if(Nsong.track.preview_url){\n//     dispatch(playAction.playSong(song));\n// }else{\n//     dispatch(playAction.toSong(song))\n// }\n\nfunction createData(name, singer, albumName) {\n    return { name, singer, albumName, remove:\" remove\"};\n}\n\nconst rows = [\n    createData('India', 'IN', \"IN\"),\n    createData('China', 'CN', 'CN'),\n    createData('Italy', 'IT', 'IT'),\n    createData('United States', 'US', 'US'),\n    createData('Canada', 'CA', 'CA'),\n    createData('Australia', 'AU', 'AU'),\n    createData('Germany', 'DE', 'DE'),\n    createData('Ireland', 'IE', 'IE'),\n    createData('Mexico', 'MX', 'MX'),\n    createData('Japan', 'JP', 'JP'),\n    createData('France', 'FR', 'FR'),\n    createData('United Kingdom', 'GB', 'GB'),\n    createData('Russia', 'RU', 'RU'),\n    createData('Nigeria', 'NG', 'NG'),\n    createData('Brazil', 'BR', 'BR'),\n];\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\nconst LikedPage = () => {\n    // const mongoCollection = require('../../../config/mongoCollections');\n    // const user = mongoCollection.users;\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleRemoveSong = () => {\n        alert(\"remove\")\n    };\n\n    return (\n        <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\" >\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.name}>\n                                    <TableCell align='center'>\n                                        {row.name}\n                                    </TableCell >\n                                    <TableCell align='center'>\n                                        {row.singer}\n                                    </TableCell>\n                                    <TableCell align='center'>\n                                        {row.albumName}\n                                    </TableCell>\n                                    <TableCell align='center' onClick={handleRemoveSong}>\n                                        <DeleteOutlinedIcon/>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n\n\n\n};\n\nexport default LikedPage\n\n\n\n\n\n","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/components/Nav/TopNav.js",["174","175","176","177","178","179","180"],"import React, { useState, useEffect } from \"react\";\nimport {  withRouter } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core';\nimport UserProfile from '../UserProfile';\nimport { Navbar,Nav,NavDropdown } from 'react-bootstrap'\nimport { AppBar } from '@material-ui/core';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nconst useStyles = makeStyles({\n    topnav:{\n        overflow: \"hidden\",\n        background: \"#333\",\n        position: \"fixed\",\n        top: \"0\",\n        width: \"100%\"\n    },\n});\n\nconst TopNav = (props)=>{\n    const  classes =  useStyles();\n    const [isAuthenticated, userHasAuthenticated] = useState(false);\n    const e = window.sessionStorage.getItem(\"userEmail\");\n    const [userEmail, setUserEmail]= useState(e);\n    console.log(\"user email: \" + userEmail);\n    console.log(\"userHasAuthenticated: \" + isAuthenticated);\n    useEffect(() => {\n      onLoadAgain();\n    }, [e]);\n    \n    async function onLoadAgain() {\n      if (userEmail) {\n        userHasAuthenticated(true);\n      }else{\n        console.log(\"user email is empty\");\n        userHasAuthenticated(false);\n      }\n  \n    }\n    if (window.location.href.includes(\"access_token\")) {\n      return (\n        <UserProfile />\n          \n      );\n    }\n    function handleLogout() {\n        window.sessionStorage.setItem(\"userEmail\", \"\");\n        userHasAuthenticated(false);\n        window.location.reload(false);\n      }\n    const url = 'https://accounts.spotify.com/authorize?show_dialog=true&client_id=230be2f46909426b8b80cac36446b52a&scope=playlist-read-private%20playlist-read-collaborative%20playlist-modify-public%20user-read-recently-played%20playlist-modify-private%20ugc-image-upload%20user-follow-modify%20user-follow-read%20user-library-read%20user-library-modify%20user-read-private%20user-read-email%20user-top-read%20user-read-playback-state&response_type=token&redirect_uri=http://localhost:3000/callback';    \n    if(isAuthenticated){\n        return(\n            <AppBar position=\"static\">\n            <Navbar className = \"topnav\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">Music Website</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/\">Home</Nav.Link>\n                <Nav.Link href=\"/search\">Search</Nav.Link>\n                <Nav.Link href=\"/search\">Playlist</Nav.Link>\n                </Nav>\n                <Nav>\n                <NavDropdown title={userEmail} id=\"collasible-nav-dropdown\">\n                    <NavDropdown.Item href=\"#action/3.1\">Account</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.2\">Profile</NavDropdown.Item>\n                    <NavDropdown.Item href=\"/likedpage\">Favorite List</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item onClick={handleLogout} >Log out</NavDropdown.Item>\n                </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n            </Navbar>\n            </AppBar>\n        )\n    }\n    else{\n        return(\n            <AppBar position=\"static\">\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">Music Website</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                {/* <Nav.Link href=\"#features\">Features</Nav.Link>\n                <Nav.Link href=\"#pricing\">Pricing</Nav.Link> */}\n                {/* <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n                    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                </NavDropdown> */}\n                </Nav>\n                <Nav>\n                <Nav.Link href=\"http://localhost:3000/register\">Register</Nav.Link>\n                <Nav.Link href=\"http://localhost:3000/login\">\n                    Login\n                </Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n            </Navbar>\n            </AppBar>\n        )\n    }\n    //return(\n    //     <header className=\"App-header\">\n    //     {/* <TopNav></TopNav> */}\n    //     {(isAuthenticated) ? (\n    //       <div>\n    //         < button class=\"login\"  className=\"login\" onClick={handleLogout} >\n    //             Logout\n    //         </button>\n    //         <p class = \"login\" style={{fontSize:'30px'}}>  To logout you might need double click</p>\n    //         <p class = \"login\" style={{fontSize:'30px'}}> <a href= \"http://localhost:3000/register\"> Register </a></p>\n    //       </div>  \n    //       ) : (\n    //     <div>\n    //         <h1 className=\"App-title\"> Welcome To Our Music Website </h1>\n    //         <p class = \"login\" style={{fontSize:'30px'}}> \n    //         <a href= \"http://localhost:3000/\" > Categories</a> </p>\n\n    //         <p class = \"login\" style={{fontSize:'30px'}}>\n    //         <a  href= \"http://localhost:3000/login\"> Login </a></p> \n\n    //         <p class = \"login\" style={{fontSize:'30px'}}> \n    //         <a href= \"http://localhost:3000/register\"> Register</a></p>\n\n    //         <p class = \"login\" style={{fontSize:'30px'}}>\n    //         <a  href= {url} > Open Spotify Online </a></p>\n    //         </div>\n    //       )}\n    //   </header>\n    //)\n}\n\nexport default withRouter(TopNav);","/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/actions/addSong.js",[],{"ruleId":"181","severity":1,"message":"182","line":6,"column":13,"nodeType":"183","messageId":"184","endLine":6,"endColumn":26},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"181","severity":1,"message":"189","line":3,"column":42,"nodeType":"183","messageId":"184","endLine":3,"endColumn":46},{"ruleId":"181","severity":1,"message":"190","line":23,"column":21,"nodeType":"183","messageId":"184","endLine":23,"endColumn":33},{"ruleId":"191","severity":1,"message":"192","line":32,"column":6,"nodeType":"193","endLine":32,"endColumn":9,"suggestions":"194"},{"ruleId":"181","severity":1,"message":"195","line":8,"column":9,"nodeType":"183","messageId":"184","endLine":8,"endColumn":15},{"ruleId":"191","severity":1,"message":"196","line":126,"column":8,"nodeType":"193","endLine":126,"endColumn":14,"suggestions":"197"},{"ruleId":"181","severity":1,"message":"198","line":1,"column":26,"nodeType":"183","messageId":"184","endLine":1,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":37,"column":33,"nodeType":"201","messageId":"202","endLine":37,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":40,"column":37,"nodeType":"201","messageId":"202","endLine":40,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":43,"column":35,"nodeType":"201","messageId":"202","endLine":43,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":46,"column":34,"nodeType":"201","messageId":"202","endLine":46,"endColumn":36},{"ruleId":"199","severity":1,"message":"200","line":49,"column":37,"nodeType":"201","messageId":"202","endLine":49,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":52,"column":44,"nodeType":"201","messageId":"202","endLine":52,"endColumn":46},{"ruleId":"181","severity":1,"message":"203","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":18},{"ruleId":"199","severity":1,"message":"200","line":39,"column":25,"nodeType":"201","messageId":"202","endLine":39,"endColumn":27},{"ruleId":"199","severity":1,"message":"200","line":42,"column":33,"nodeType":"201","messageId":"202","endLine":42,"endColumn":35},{"ruleId":"181","severity":1,"message":"204","line":7,"column":10,"nodeType":"183","messageId":"184","endLine":7,"endColumn":21},{"ruleId":"191","severity":1,"message":"205","line":201,"column":7,"nodeType":"193","endLine":201,"endColumn":54,"suggestions":"206"},{"ruleId":"191","severity":1,"message":"205","line":227,"column":8,"nodeType":"193","endLine":227,"endColumn":67,"suggestions":"207"},{"ruleId":"181","severity":1,"message":"208","line":6,"column":11,"nodeType":"183","messageId":"184","endLine":6,"endColumn":19},{"ruleId":"191","severity":1,"message":"209","line":125,"column":8,"nodeType":"193","endLine":125,"endColumn":14,"suggestions":"210"},{"ruleId":"181","severity":1,"message":"204","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":21},{"ruleId":"191","severity":1,"message":"211","line":207,"column":8,"nodeType":"193","endLine":207,"endColumn":36,"suggestions":"212"},{"ruleId":"181","severity":1,"message":"213","line":12,"column":10,"nodeType":"183","messageId":"184","endLine":12,"endColumn":28},{"ruleId":"214","severity":1,"message":"215","line":93,"column":37,"nodeType":"216","messageId":"217","endLine":93,"endColumn":39},{"ruleId":"181","severity":1,"message":"218","line":120,"column":11,"nodeType":"183","messageId":"184","endLine":120,"endColumn":21},{"ruleId":"214","severity":1,"message":"219","line":169,"column":46,"nodeType":"216","messageId":"220","endLine":169,"endColumn":48},{"ruleId":"181","severity":1,"message":"221","line":249,"column":17,"nodeType":"183","messageId":"184","endLine":249,"endColumn":21},{"ruleId":"191","severity":1,"message":"222","line":260,"column":8,"nodeType":"193","endLine":260,"endColumn":36,"suggestions":"223"},{"ruleId":"191","severity":1,"message":"224","line":272,"column":8,"nodeType":"193","endLine":272,"endColumn":36,"suggestions":"225"},{"ruleId":"181","severity":1,"message":"226","line":2,"column":22,"nodeType":"183","messageId":"184","endLine":2,"endColumn":30},{"ruleId":"181","severity":1,"message":"189","line":8,"column":23,"nodeType":"183","messageId":"184","endLine":8,"endColumn":27},{"ruleId":"191","severity":1,"message":"227","line":131,"column":3,"nodeType":"193","endLine":131,"endColumn":13,"suggestions":"228"},{"ruleId":"214","severity":1,"message":"219","line":138,"column":54,"nodeType":"216","messageId":"220","endLine":138,"endColumn":56},{"ruleId":"214","severity":1,"message":"219","line":147,"column":67,"nodeType":"216","messageId":"220","endLine":147,"endColumn":69},{"ruleId":"214","severity":1,"message":"219","line":156,"column":56,"nodeType":"216","messageId":"220","endLine":156,"endColumn":58},{"ruleId":"199","severity":1,"message":"200","line":194,"column":29,"nodeType":"201","messageId":"202","endLine":194,"endColumn":31},{"ruleId":"181","severity":1,"message":"229","line":100,"column":13,"nodeType":"183","messageId":"184","endLine":100,"endColumn":18},{"ruleId":"191","severity":1,"message":"230","line":124,"column":7,"nodeType":"193","endLine":124,"endColumn":35,"suggestions":"231"},{"ruleId":"181","severity":1,"message":"232","line":1,"column":10,"nodeType":"183","messageId":"184","endLine":1,"endColumn":14},{"ruleId":"181","severity":1,"message":"198","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"181","severity":1,"message":"233","line":2,"column":16,"nodeType":"183","messageId":"184","endLine":2,"endColumn":26},{"ruleId":"181","severity":1,"message":"234","line":3,"column":8,"nodeType":"183","messageId":"184","endLine":3,"endColumn":18},{"ruleId":"181","severity":1,"message":"235","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":13},{"ruleId":"181","severity":1,"message":"236","line":59,"column":13,"nodeType":"183","messageId":"184","endLine":59,"endColumn":17},{"ruleId":"181","severity":1,"message":"237","line":59,"column":19,"nodeType":"183","messageId":"184","endLine":59,"endColumn":26},{"ruleId":"181","severity":1,"message":"238","line":60,"column":13,"nodeType":"183","messageId":"184","endLine":60,"endColumn":19},{"ruleId":"181","severity":1,"message":"239","line":60,"column":21,"nodeType":"183","messageId":"184","endLine":60,"endColumn":28},{"ruleId":"181","severity":1,"message":"240","line":61,"column":13,"nodeType":"183","messageId":"184","endLine":61,"endColumn":20},{"ruleId":"181","severity":1,"message":"241","line":61,"column":22,"nodeType":"183","messageId":"184","endLine":61,"endColumn":30},{"ruleId":"181","severity":1,"message":"242","line":114,"column":11,"nodeType":"183","messageId":"184","endLine":114,"endColumn":22},{"ruleId":"181","severity":1,"message":"243","line":1,"column":16,"nodeType":"183","messageId":"184","endLine":1,"endColumn":24},{"ruleId":"181","severity":1,"message":"198","line":1,"column":26,"nodeType":"183","messageId":"184","endLine":1,"endColumn":35},{"ruleId":"181","severity":1,"message":"234","line":10,"column":8,"nodeType":"183","messageId":"184","endLine":10,"endColumn":18},{"ruleId":"181","severity":1,"message":"244","line":13,"column":8,"nodeType":"183","messageId":"184","endLine":13,"endColumn":15},{"ruleId":"181","severity":1,"message":"245","line":14,"column":7,"nodeType":"183","messageId":"184","endLine":14,"endColumn":12},{"ruleId":"181","severity":1,"message":"246","line":8,"column":27,"nodeType":"183","messageId":"184","endLine":8,"endColumn":33},{"ruleId":"181","severity":1,"message":"247","line":8,"column":35,"nodeType":"183","messageId":"184","endLine":8,"endColumn":40},{"ruleId":"181","severity":1,"message":"189","line":8,"column":42,"nodeType":"183","messageId":"184","endLine":8,"endColumn":46},{"ruleId":"181","severity":1,"message":"248","line":20,"column":12,"nodeType":"183","messageId":"184","endLine":20,"endColumn":19},{"ruleId":"181","severity":1,"message":"190","line":23,"column":23,"nodeType":"183","messageId":"184","endLine":23,"endColumn":35},{"ruleId":"191","severity":1,"message":"192","line":28,"column":8,"nodeType":"193","endLine":28,"endColumn":11,"suggestions":"249"},{"ruleId":"181","severity":1,"message":"250","line":50,"column":11,"nodeType":"183","messageId":"184","endLine":50,"endColumn":14},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["251"],"no-negated-in-lhs",["252"],"'Link' is defined but never used.","'setUserEmail' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onLoadAgain'. Either include it or remove the dependency array.","ArrayExpression",["253"],"'curUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.match.params.categories' and 'total'. Either include them or remove the dependency array.",["254"],"'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Redirect' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["255"],["256"],"'localUrl' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'total'. Either include it or remove the dependency array.",["257"],"React Hook useEffect has missing dependencies: 'getData' and 'total'. Either include them or remove the dependency array.",["258"],"'deprecationHandler' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'resumeSong' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'time' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["259"],"React Hook useEffect has missing dependencies: 'audioControl', 'pauseSong', and 'songsPlay.playing'. Either include them or remove the dependency array.",["260"],"'useTheme' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["261"],"'pause' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'song.track.id'. Either include it or remove the dependency array.",["262"],"'json' is defined but never used.","'withRouter' is defined but never used.","'Pagination' is defined but never used.","'Image' is defined but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'isLast' is assigned a value but never used.","'setLast' is assigned a value but never used.","'isFirst' is assigned a value but never used.","'setFirst' is assigned a value but never used.","'searchValue' is assigned a value but never used.","'useState' is defined but never used.","'addSong' is defined but never used.","'axios' is assigned a value but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'classes' is assigned a value but never used.",["263"],"'url' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"264","fix":"284"},"Update the dependencies array to be: [e, onLoadAgain]",{"range":"285","text":"286"},"Update the dependencies array to be: [page, props.match.params.categories, total]",{"range":"287","text":"288"},"Update the dependencies array to be: [getData, props.match.params.id, props.match.params.type]",{"range":"289","text":"290"},"Update the dependencies array to be: [page, props.match.params.id, total, props.match.params.type, getData]",{"range":"291","text":"292"},"Update the dependencies array to be: [page, total]",{"range":"293","text":"294"},"Update the dependencies array to be: [getData, page, props.match.params.id, total]",{"range":"295","text":"296"},"Update the dependencies array to be: [dispatch, song, songsPlay.globalPlay]",{"range":"297","text":"298"},"Update the dependencies array to be: [songsPlay.globalPlay, song, songsPlay.playing, audioControl, pauseSong]",{"range":"299","text":"300"},"Update the dependencies array to be: [id, props.id]",{"range":"301","text":"302"},"Update the dependencies array to be: [song.track.id, songR, songsPlay.globalPlay]",{"range":"303","text":"304"},{"range":"305","text":"286"},[1090,1093],"[e, onLoadAgain]",[3856,3862],"[page, props.match.params.categories, total]",[5883,5930],"[getData, props.match.params.id, props.match.params.type]",[6572,6631],"[page, props.match.params.id, total, props.match.params.type, getData]",[3543,3549],"[page, total]",[6207,6235],"[getData, page, props.match.params.id, total]",[6898,6926],"[dispatch, song, songsPlay.globalPlay]",[7237,7265],"[songsPlay.globalPlay, song, songsPlay.playing, audioControl, pauseSong]",[3147,3157],"[id, props.id]",[3122,3150],"[song.track.id, songR, songsPlay.globalPlay]",[984,987]]