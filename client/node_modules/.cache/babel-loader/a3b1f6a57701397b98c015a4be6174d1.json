{"ast":null,"code":"import { json } from \"body-parser\";\nconst initalState = {\n  playing: false,\n  playTime: 0,\n  song: '',\n  //Pause: true,\n  globalPlay: false,\n  songList: [],\n  currentIndex: 0\n};\nlet copyState = null;\n\nconst songPlayer = (state = initalState, action) => {\n  const {\n    type,\n    song,\n    songList,\n    currentIndex,\n    track\n  } = action;\n\n  switch (type) {\n    case \"PLAY_SONG\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.globalPlay = true;\n      copyState.song = song;\n      copyState.playing = true;\n      copyState.currentIndex = currentIndex;\n      console.log(copyState);\n      return copyState;\n\n    case \"TO_SONG\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.globalPlay = false;\n      copyState.song = song;\n      copyState.playing = true;\n      copyState.currentIndex = currentIndex; //console.log(copyState);\n\n      return copyState;\n\n    case \"STOP_SONG\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.globalPlay = false;\n      copyState.playing = false;\n      return copyState;\n\n    case \"PAUSE_SONG\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.globalPlay = false;\n      copyState.playing = false;\n      return copyState;\n\n    case \"RESUME_SONG\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.globalPlay = true;\n      copyState.playing = true;\n      return copyState;\n\n    case \"UPDATE_SONG_LIST\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.songList = songList;\n      copyState.track = track;\n      return copyState;\n\n    case \"UPDATE_INDEX\":\n      copyState = JSON.parse(JSON.stringify(state));\n      copyState.currentIndex = currentIndex;\n      return copyState;\n\n    case \"INCREASE_SONG_TIME\":\n      return { ...state,\n        timeElapsed: action.time\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default songPlayer;","map":{"version":3,"sources":["/Users/lirupu/cs-554-web2/CS-554A-Final-Project/client/src/reducers/songPlayer.js"],"names":["json","initalState","playing","playTime","song","globalPlay","songList","currentIndex","copyState","songPlayer","state","action","type","track","JSON","parse","stringify","console","log","timeElapsed","time"],"mappings":"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","sourcesContent":["import { json } from \"body-parser\";\n\nconst initalState = {\n    playing: false,\n    playTime: 0,\n    song: '',\n    //Pause: true,\n    globalPlay: false,\n    songList:[],\n    currentIndex:0\n\n}\nlet copyState = null\nconst songPlayer = (state = initalState, action) => {\n    const {type, song, songList, currentIndex, track} = action;\n\n    switch(type) {\n        case \"PLAY_SONG\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.globalPlay = true;\n            copyState.song = song;\n            copyState.playing = true;\n            copyState.currentIndex  =  currentIndex;\n            console.log(copyState);\n            return copyState\n\n        case \"TO_SONG\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.globalPlay = false;\n            copyState.song = song;\n            copyState.playing = true;\n            copyState.currentIndex  =  currentIndex;\n            //console.log(copyState);\n            return copyState\n\n        case \"STOP_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = false;\n            copyState.playing = false;\n            return copyState;\n\n        case \"PAUSE_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = false;\n            copyState.playing = false;\n            return copyState;\n\n\n\n        case \"RESUME_SONG\":\n            copyState = JSON.parse(JSON.stringify(state));\n            copyState.globalPlay = true;\n            copyState.playing = true;\n            return copyState;\n\n        case \"UPDATE_SONG_LIST\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.songList = songList;\n            copyState.track = track;\n            return copyState\n\n        case \"UPDATE_INDEX\":\n            copyState = JSON.parse(JSON.stringify(state))\n            copyState.currentIndex  =  currentIndex;\n            return copyState\n\n        case \"INCREASE_SONG_TIME\":\n            return {\n                ...state,\n                timeElapsed: action.time\n            };\n        default:\n            return state;\n }\n};\nexport default songPlayer;"]},"metadata":{},"sourceType":"module"}